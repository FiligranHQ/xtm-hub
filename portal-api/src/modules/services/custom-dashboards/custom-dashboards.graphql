type CustomDashboardImage {
  id: ID!
}

type SeoCustomDashboard {
  id: ID!
  uploader: User
  name: String
  slug: String
  short_description: String
  description: String
  created_at: Date!
  updated_at: Date
  updater_id: String
  download_number: Int
  share_number: Int
  product_version: String
  children_documents: [CustomDashboardImage]
  labels: [Label]
  active: Boolean!
}

input CreateCustomDashboardInput {
  name: String!
  slug: String!
  short_description: String!
  description: String!
  active: Boolean!
  labels: [String!]
  # Specific fields for custom dashboards
  product_version: String!
}

type CustomDashboard implements Node {
  id: ID!
  type: String!
  uploader: User
  uploader_organization: Organization
  name: String
  short_description: String
  description: String
  file_name: String!
  minio_name: String!
  active: Boolean!
  created_at: Date!
  updated_at: Date
  updater_id: String
  download_number: Int!
  share_number: Int!
  slug: String!
  labels: [Label]
  service_instance: ServiceInstance
  subscription: SubscriptionModel
  children_documents: [CustomDashboardImage]
  # Specific fields for custom dashboards
  product_version: String
}

type CustomDashboardEdge {
  cursor: String!
  node: CustomDashboard!
}

type CustomDashboardConnection {
  totalCount: Int!
  edges: [CustomDashboardEdge!]!
  pageInfo: PageInfo!
}

type Query {
  seoCustomDashboardsByServiceSlug(serviceSlug: String): [SeoCustomDashboard]
  seoCustomDashboardBySlug(slug: String): SeoCustomDashboard
  customDashboards(
    first: Int!
    after: ID
    orderBy: DocumentOrdering!
    orderMode: OrderingMode!
    searchTerm: String
    filters: [Filter!]
    serviceInstanceId: String
  ): CustomDashboardConnection! @auth
}

type Mutation {
  createCustomDashboard(
    input: CreateCustomDashboardInput!
    document: [Upload!]!
    serviceInstanceId: String
  ): CustomDashboard @auth @service_capa(requires: [UPLOAD])
}
