enum ServiceOrdering {
    name
    description
    provider
    type
}

type Service implements Node {
    id: ID!
    name: String!
    description: String
    provider: String
    type: String
    subscription_service_type: String
    status: String
    link: ServiceLink
}

type ServiceEdge {
    cursor: String!
    node: Service!
}

type ServiceConnection {
    totalCount: Int!
    edges: [ServiceEdge!]!
    pageInfo: PageInfo!
}

input AddServiceInput {
    service_name: String
    service_description: String
    fee_type: String
    price: Int
    organization_id: String
    url: String
}
input AddServiceCommunityInput {
    community_name: String
    community_description: String
    price: Int
    fee_type: String
    open_feed_url: String
    private_feed_url: String
    cyber_weather_url: String
    next_cloud_url: String
    organizations_id: [String]
}
type Mutation {
    editService(id: ID!, name: String!): Service @auth(requires: [BYPASS])
    addService(input: AddServiceInput): Subscription @auth(requires: [BYPASS])
    addServiceCommunity(input: AddServiceCommunityInput): Service @auth(requires: [BYPASS])
    deleteService(id: ID!): Service @auth(requires: [BYPASS])
}

type Query {
    services(
        first: Int!
        after: ID
        orderBy: ServiceOrdering!
        orderMode: OrderingMode!
    ): ServiceConnection!
    @auth(requires: [FRT_ACCESS_SERVICES, BCK_MANAGE_SERVICES])
    communities(
        first: Int!
        after: ID
        orderBy: ServiceOrdering!
        orderMode: OrderingMode!
    ): ServiceConnection!
    @auth(requires: [FRT_ACCESS_SERVICES, BCK_MANAGE_SERVICES])
}

type ServiceSubscription {
    add: Service
    edit: Service
    delete: Service
}

type Subscription {
    Service: ServiceSubscription @auth
}
