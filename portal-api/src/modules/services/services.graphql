enum ServiceOrdering {
  name
  description
  provider
  type
}

type Service implements Node {
  id: ID!
  name: String!
  description: String
  provider: String
  type: String
  subscription_service_type: String
  status: String
  link: ServiceLink
}

type ServiceEdge {
  cursor: String!
  node: Service!
}

type ServiceConnection {
  totalCount: Int!
  edges: [ServiceEdge!]!
  pageInfo: PageInfo!
}

type Mutation {
  editService(id: ID!, name: String!): Service @auth(requires: [BYPASS])
  addService(name: String!): Service @auth(requires: [BYPASS])
  deleteService(id: ID!): Service @auth(requires: [BYPASS])
}

type Query {
  services(
    first: Int!
    after: ID
    orderBy: ServiceOrdering!
    orderMode: OrderingMode!
  ): ServiceConnection!
    @auth(requires: [FRT_ACCESS_SERVICES, BCK_MANAGE_SERVICES])
}

type ServiceSubscription {
  add: Service
  edit: Service
  delete: Service
}

type Subscription {
  Service: ServiceSubscription @auth
}
