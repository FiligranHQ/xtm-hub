enum ServiceOrdering {
  name
  description
  provider
  type
}

type ServiceInstance implements Node {
  id: ID!
  name: String!
  description: String
  provider: String
  type: String
  creation_status: String
  subscribed: Boolean
  links: [ServiceLink]
  organization: [Organization]
  subscriptions: [Subscription]
  capabilities: [String!]
  public: Boolean
  join_type: String
  tags: [String]
}

type ServiceInstanceEdge {
  cursor: String!
  node: ServiceInstance!
}

type ServiceConnection {
  totalCount: Int!
  edges: [ServiceInstanceEdge!]!
  pageInfo: PageInfo!
}

input AddServiceInput {
  service_instance_name: String
  service_instance_description: String
  fee_type: String
  price: Int
  organization_id: String
  url: String
}

type Mutation {
  editService(id: ID!, name: String!): ServiceInstance
    @auth(requires: [BCK_MANAGE_SERVICES])
  addService(input: AddServiceInput): Subscription
    @auth(requires: [BCK_MANAGE_SERVICES])
  deleteService(id: ID!): ServiceInstance @auth(requires: [BCK_MANAGE_SERVICES])
}

type Query {
  publicServices(
    first: Int!
    after: ID
    orderBy: ServiceOrdering!
    orderMode: OrderingMode!
  ): ServiceConnection!
    @auth(requires: [FRT_ACCESS_SERVICES, BCK_MANAGE_SERVICES])
  services(
    first: Int!
    after: ID
    orderBy: ServiceOrdering!
    orderMode: OrderingMode!
  ): ServiceConnection! @auth(requires: [BYPASS])
  serviceById(service_instance_id: ID): ServiceInstance @auth
  serviceByIdWithSubscriptions(service_instance_id: ID): ServiceInstance
    @auth
    @service_capa(requires: [MANAGE_ACCESS])
}

type ServiceInstanceSubscription {
  add: ServiceInstance
  edit: ServiceInstance
  delete: ServiceInstance
}

type Subscription {
  ServiceInstance: ServiceInstanceSubscription @auth
}
