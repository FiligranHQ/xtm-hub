enum DocumentOrdering {
  file_name
  description
  created_at
  download_number
}

type Document implements Node {
  id: ID!
  uploader: User
  service_instance_id: String!
  name: String
  short_description: String
  description: String
  file_name: String!
  minio_name: String!
  active: Boolean!
  created_at: Date!
  updated_at: Date
  updater_id: String
  download_number: Int
  children_documents: [Document!]
  labels: [Label!]!
}

input EditDocumentInput {
  short_description: String
  labels: [String!]
  description: String
  name: String
  active: Boolean
}

type Mutation {
  addDocument(
    document: Upload
    name: String
    short_description: String
    description: String
    serviceInstanceId: String
    parentDocumentId: ID
    labels: [String!]
    active: Boolean
  ): Document! @auth(requires: [BYPASS])
  editDocument(
    documentId: ID
    input: EditDocumentInput!
    serviceInstanceId: String
  ): Document! @auth(requires: [BYPASS])
  deleteDocument(
    documentId: ID
    serviceInstanceId: String
    forceDelete: Boolean
  ): Document! @auth(requires: [BYPASS])
}

type DocumentEdge {
  cursor: String!
  node: Document!
}

type DocumentConnection {
  totalCount: Int!
  edges: [DocumentEdge!]!
  pageInfo: PageInfo!
}

type Query {
  documentExists(documentName: String, serviceInstanceId: String): Boolean
    @auth(requires: [BYPASS])
  documents(
    first: Int!
    after: ID
    orderBy: DocumentOrdering!
    orderMode: OrderingMode!
    filter: String
    filters: [Filter!]
    serviceInstanceId: String
    parentsOnly: Boolean
  ): DocumentConnection! @auth
  document(documentId: ID): Document
}
