enum DocumentOrdering {
  file_name
  description
  created_at
  download_number
}

type Document implements Node {
  id: ID!
  uploader: User
  service_instance_id: String!
  name: String
  short_description: String
  description: String
  file_name: String!
  minio_name: String!
  active: Boolean!
  created_at: Date!
  updated_at: Date
  updater_id: String
  download_number: Int
  product_version: String
  children_documents: [Document!]
  labels: [Label!]!
  slug: String
  service_instance: ServiceInstance
}

input EditDocumentInput {
  short_description: String
  product_version: String
  labels: [String!]
  description: String
  name: String
  active: Boolean
  slug: String
}

type Mutation {
  addDocument(
    document: Upload
    name: String
    short_description: String
    product_version: String
    description: String
    service_instance_id: String
    parentDocumentId: ID
    labels: [String!]
    active: Boolean
    slug: String
  ): Document! @auth @service_capa(requires: [UPLOAD])
  editDocument(
    documentId: ID
    input: EditDocumentInput!
    service_instance_id: String
  ): Document! @auth @service_capa(requires: [UPLOAD])
  deleteDocument(
    documentId: ID
    service_instance_id: String
    forceDelete: Boolean
  ): Document! @auth @service_capa(requires: [UPLOAD, DELETE])
}

type DocumentEdge {
  cursor: String!
  node: Document!
}

type DocumentConnection {
  totalCount: Int!
  edges: [DocumentEdge!]!
  pageInfo: PageInfo!
}

type Query {
  documentExists(documentName: String, service_instance_id: String): Boolean
    @auth
    @service_capa(requires: [UPLOAD])
  documents(
    first: Int!
    after: ID
    orderBy: DocumentOrdering!
    orderMode: OrderingMode!
    searchTerm: String
    filters: [Filter!]
    serviceInstanceId: String
    parentsOnly: Boolean
  ): DocumentConnection! @auth
  document(documentId: ID, serviceInstanceId: ID): Document
}
