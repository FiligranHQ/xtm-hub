enum UserOrdering {
  email
  first_name
  last_name
}

type Capability implements Node {
  id: ID!
  name: Restriction!
}

interface User implements Node {
  id: ID!
  email: String!
  first_name: String
  last_name: String
}

type BaseUser implements User & Node {
  id: ID!
  email: String!
  first_name: String
  last_name: String
}

type MeUser implements User & Node {
  id: ID!
  email: String!
  first_name: String
  last_name: String
  organizations: [MeOrganization!]!
  capabilities: [Capability!]!
  roles_portal_id: [RolePortalID!]!
}

type UserDetail implements User & Node {
  id: ID!
  email: String!
  first_name: String
  last_name: String
  organizations: [Organization!]!
  roles_portal_id: [RolePortalID!]!
}

type UserEdge {
  cursor: String!
  node: BaseUser!
}

type UserConnection {
  totalCount: Int!
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type Query {
  me: MeUser @auth
  user(id: ID!): UserDetail @auth
  users(
    first: Int!
    after: ID
    orderBy: UserOrdering!
    orderMode: OrderingMode!
    filter: String
  ): UserConnection! @auth
}

input EditUserInput {
  email: String!
  first_name: String
  last_name: String
  organizations: [String]!
  roles_id: [String]!
}

input AddUserInput {
  email: String!
  password: String!
  organizations: [String]!
  first_name: String!
  last_name: String!
  roles_id: [String]!
}

type Mutation {
  # Management
  mergeTest(from: ID!, target: ID!): ID!
    @auth(requires: [FRT_MANAGE_USER, BCK_MANAGE_COMMUNITIES])
  addUser(input: AddUserInput!): UserDetail
    @auth(requires: [FRT_MANAGE_USER, BCK_MANAGE_COMMUNITIES])
  editUser(id: ID!, input: EditUserInput!): UserDetail!
    @auth(requires: [FRT_MANAGE_USER, BCK_MANAGE_COMMUNITIES])
  deleteUser(id: ID!): BaseUser
    @auth(requires: [FRT_MANAGE_USER, BCK_MANAGE_COMMUNITIES])
  changeSelectedOrganization(organization_id: ID!): Boolean @auth
  # Login
  login(email: String!, password: String): MeUser
  logout: ID! @auth
}

type UserSubscription {
  add: UserDetail
  edit: UserDetail
  delete: BaseUser
  merge: MergeEvent
}

type Subscription {
  User: UserSubscription @auth
}
