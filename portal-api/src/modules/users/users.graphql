enum UserOrdering {
  email
  first_name
  last_name
}

type Capability implements Node {
  id: ID!
  name: Restriction!
}

type User implements Node {
  id: ID!
  email: String!
  first_name: String
  last_name: String
  organization_id: ID!
  organization: Organization!
  capabilities: [Capability!]!
  tracking_data: [ActionTracking]
  roles_portal_id: [RolePortalID!]!
}

type UserEdge {
  cursor: String!
  node: User
}

type UserConnection {
  totalCount: Int!
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type Query {
  me: User @auth
  user(id: ID!): User @auth
  users(
    first: Int!
    after: ID
    orderBy: UserOrdering!
    orderMode: OrderingMode!
  ): UserConnection! @auth
}

input EditUserInput {
  email: String!
  first_name: String
  last_name: String
  organization_id: String!
  roles_id: [String]!
}

input AddUserInput {
  email: String!
  password: String!
  organization_id: String!
  first_name: String!
  last_name: String!
  roles_id: [String]!
}

type Mutation {
  # Management
  mergeTest(from: ID!, target: ID!): ID! @auth(requires: [ADMIN])
  addUser(input: AddUserInput!): User @auth(requires: [ADMIN])
  editUser(id: ID!, input: EditUserInput!): User @auth(requires: [ADMIN])
  deleteUser(id: ID!): User @auth(requires: [ADMIN])
  # Login
  login(email: String!, password: String): User
  logout: ID! @auth
}
