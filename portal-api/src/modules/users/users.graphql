enum UserOrdering {
  email
  first_name
  last_name
  disabled
  country
  last_login
}

type Capability implements Node {
  id: ID!
  name: Restriction!
}

type OrganizationCapabilities implements Node {
  id: ID!
  organization: Organization!
  capabilities: [String!]
}

type User implements Node {
  id: ID!
  email: String!
  first_name: String
  last_name: String
  picture: String
  country: String
  disabled: Boolean
  selected_organization_id: String
  organizations: [Organization!]
  organization_capabilities: [OrganizationCapabilities!]
  capabilities: [Capability!]
  roles_portal: [RolePortal!]
  selected_org_capabilities: [String!]
  last_login: Date
}

type UserEdge {
  cursor: String!
  node: User!
}

type UserConnection {
  totalCount: Int!
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type Query {
  me: User
  user(id: ID!): User @auth
  users(
    first: Int!
    after: ID
    orderBy: UserOrdering!
    orderMode: OrderingMode!
    searchTerm: String
    filters: [Filter!]
  ): UserConnection! @auth
  userHasOrganizationWithSubscription: Boolean! @auth
}

input AdminEditUserInput {
  disabled: Boolean
  first_name: String
  last_name: String
  email: String
  organization_capabilities: [OrganizationCapabilitiesInput!]
}

input EditUserInput {
  disabled: Boolean
  first_name: String
  last_name: String
  email: String
  capabilities: [String!]
}

input EditMeUserInput {
  first_name: String
  last_name: String
  picture: String
  country: String
}

input OrganizationCapabilitiesInput {
  organization_id: ID!
  capabilities: [String!]
}
input AddUserInput {
  email: String!
  first_name: String
  last_name: String
  password: String
  capabilities: [String!]
}
input AdminAddUserInput {
  email: String!
  first_name: String
  last_name: String
  password: String
  organization_capabilities: [OrganizationCapabilitiesInput!]
}

type Mutation {
  # Management
  mergeTest(from: ID!, target: ID!): ID! @auth(requires: [MANAGE_ACCESS])
  addUser(input: AddUserInput!): User @auth(requires: [MANAGE_ACCESS])
  adminAddUser(input: AdminAddUserInput!): User @auth(requires: [BYPASS])
  adminEditUser(id: ID!, input: AdminEditUserInput!): User!
    @auth(requires: [BYPASS])
  editUser(id: ID!, input: EditUserInput!): User!
    @auth(requires: [MANAGE_ACCESS])
  editMeUser(input: EditMeUserInput!): User! @auth
  changeSelectedOrganization(organization_id: ID!): User @auth
  removeUserFromOrganization(user_id: ID!, organization_id: ID!): User
    @auth(requires: [MANAGE_ACCESS])
  # Login
  login(email: String!, password: String): User
  logout: ID! @auth
}

type UserSubscription {
  add: User
  edit: User
  delete: User
  merge: MergeEvent
}

type MeUserSubscription {
  edit: User
  delete: User
}

type Subscription {
  User: UserSubscription @auth
  MeUser: MeUserSubscription @auth
}
