import { PortalContext } from '../../model/portal-context';
import { Readable } from 'stream';
import {
  analyseMalwareFile,
  analyseMalwareString,
} from './malware-analysis.helper';
import { db, paginate } from '../../../knexfile';
import { MalwareAnalysisConnection } from '../../__generated__/resolvers-types';
import MalwareAnalysis from '../../model/kanel/public/MalwareAnalysis';
import { UserId } from '../../model/kanel/public/User';

export interface UploadFile {
  file: {
    createReadStream: () => Readable;
    filename: string;
    mimeType: string;
  };
}

export interface AnalyseStringParams {
  string?: string;
  uploadFile?: UploadFile;
}

export const analyseMalwareStringOrFile = async (
  context: PortalContext,
  { string, uploadFile }: AnalyseStringParams
) => {
  if (uploadFile?.file) {
    return await analyseMalwareFile(context, uploadFile);
  }
  if (string) {
    return await analyseMalwareString(context, string);
  }
  throw new Error('Either string or uploadFile must be provided.');
};

export const loadMalwareAnalysis = async (context: PortalContext, opts) => {
  const { first, after, orderMode, orderBy } = opts;
  const malwareAnalysisConnection = await paginate<MalwareAnalysis>(
    context,
    'MalwareAnalysis',
    {
      first,
      after,
      orderMode,
      orderBy,
    }
  )
    .select(['MalwareAnalysis.*'])
    .where({ user_id: context.user?.id as UserId })
    .asConnection<MalwareAnalysisConnection>();

  const { totalCount } = await db<MalwareAnalysis>(
    context,
    'MalwareAnalysis',
    opts
  )
    .where({ user_id: context.user?.id as UserId })
    .countDistinct('id as totalCount')
    .first();

  return {
    totalCount,
    ...malwareAnalysisConnection,
  };
};
