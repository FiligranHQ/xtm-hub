import {
  MalwareAnalysis,
  Resolvers,
} from '../../__generated__/resolvers-types';
import {
  analyseMalwareStringOrFile,
  loadMalwareAnalysis,
} from './malware-analysis.domain';
import { MalwareAnalysisId } from '../../model/kanel/public/MalwareAnalysis';
import { updateUnsecureMalwareAnalysis } from './malware-analysis.db';
import { dispatch, listen } from '../../pub';

const resolvers: Resolvers = {
  Mutation: {
    malwareAnalysis: async (_, opt, context) =>
      (await analyseMalwareStringOrFile(context, {
        string: opt.string,
        uploadFile: opt.file,
      })) as MalwareAnalysis,

    malwareAnalysisResult: async (_, { id, result, status }) => {
      const [updateMalwareAnalysis] = await updateUnsecureMalwareAnalysis({
        id: id as MalwareAnalysisId,
        result,
        status,
        ended_at: new Date(),
      });
      await dispatch('MalwareAnalysis', 'edit', updateMalwareAnalysis);
      return updateMalwareAnalysis;
    },
  },
  Query: {
    malwareAnalysis: async (
      _,
      { first, after, orderMode, orderBy },
      context
    ) => {
      return loadMalwareAnalysis(context, { first, after, orderMode, orderBy });
    },
  },
  Subscription: {
    MalwareAnalysis: {
      subscribe: (_, __, context) => ({
        [Symbol.asyncIterator]: () => listen(context, ['MalwareAnalysis']),
      }),
    },
  },
};

export default resolvers;
