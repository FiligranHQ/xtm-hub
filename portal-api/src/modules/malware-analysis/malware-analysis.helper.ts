import { streamToBlob } from '../../utils/processUploadFile';
import { UploadFile } from './malware-analysis.domain';
import { PortalContext } from '../../model/portal-context';
import {
  insertMalwareAnalysis,
  updateMalwareAnalysis,
} from './malware-analysis.db';
import { UserId } from '../../model/kanel/public/User';
import { GLIMPS_URL_SUBMIT } from './malware-analysis.const';

export const uploadFileToServer = async (
  url: string,
  uploadFile: UploadFile
) => {
  const blob = await streamToBlob(
    uploadFile.file.createReadStream(),
    uploadFile.file.mimeType
  );
  const formData = new FormData();
  formData.append('file', blob, uploadFile.file.filename);

  const response = await fetch(url, {
    method: 'POST',
    headers: {
      Accept: 'application/json',
    },
    body: formData,
  });

  return response.json();
};

export const uploadStringToServer = async (
  url: string,
  stringData?: string
) => {
  const response = await fetch(url, {
    method: 'POST',
    headers: {
      Accept: 'application/json',
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ string: stringData }),
  });

  return response.json();
};

export const insertAndProcessMalwareAnalysis = async (
  context: PortalContext,
  type: string,
  name: string,
  fetchFunction: () => Promise<unknown>
) => {
  const [malwareAnalysis] = await insertMalwareAnalysis(context, {
    type,
    name,
    status: 'INITIAL',
    user_id: context.user?.id as UserId,
  });

  const result = await fetchFunction();

  const [updatedMalwareAnalysis] = await updateMalwareAnalysis(context, {
    id: malwareAnalysis.id,
    result: JSON.stringify(result),
    status: 'PROCESSING',
    ended_at: new Date(),
  });

  return updatedMalwareAnalysis;
};

export const analyseMalwareString = async (
  context: PortalContext,
  string: string
) => {
  return await insertAndProcessMalwareAnalysis(
    context,
    'STRING',
    string, // Since there's no file name, provide a placeholder or make it optional in the database
    () => uploadStringToServer(GLIMPS_URL_SUBMIT, string)
  );
};

export const analyseMalwareFile = async (
  context: PortalContext,
  uploadFile: UploadFile
) => {
  return await insertAndProcessMalwareAnalysis(
    context,
    'FILE',
    uploadFile.file.filename,
    () => uploadFileToServer(GLIMPS_URL_SUBMIT, uploadFile)
  );
};
