enum SubscriptionOrdering {
  organization_name
  start_date
  end_date
  status
  service_name
  service_provider
  service_type
  service_description
}
type SubscriptionModel implements Node {
  id: ID!
  organization_id: ID!
  service_instance_id: ID!
  start_date: Date
  end_date: Date
  status: String
  organization: Organization!
  service_url: String!
  service_instance: ServiceInstance
  subscription_capability: [SubscriptionCapability]
  user_service: [UserService]!
}

type SubscriptionEdge {
  cursor: String!
  node: SubscriptionModel!
}

type Mutation {
  addSubscription(service_instance_id: String): ServiceInstance
    @auth(requires: [ADMINISTRATE_ORGANIZATION, MANAGE_SUBSCRIPTION])
  addSubscriptionInService(
    service_instance_id: String
    organization_id: ID
    capability_ids: [ID]
    start_date: Date
    end_date: Date
  ): ServiceInstance @auth(requires: [BYPASS])
  deleteSubscription(subscription_id: ID!): ServiceInstance
    @auth(requires: [ADMINISTRATE_ORGANIZATION, MANAGE_SUBSCRIPTION])
    @service_capa(requires: [MANAGE_ACCESS])
}

type Query {
  subscriptionById(subscription_id: ID): SubscriptionModel @auth
}
