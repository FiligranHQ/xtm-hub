enum UserServiceOrdering {
  first_name
  last_name
  email
  service_name
  service_provider
  service_type
  service_description
  subscription_status
  ordering
}

input UserServiceAddInput {
  email: [String!]!
  capabilities: [String]
  subscriptionId: ID!
}

input UserServiceDeleteInput {
  email: String!
  capabilities: [String]
  subscriptionId: String!
}

type Mutation {
  addUserService(input: UserServiceAddInput!): UserService @auth
  deleteUserService(input: UserServiceDeleteInput!): UserService @auth
  selfJoinServiceInstance(service_instance_id: ID!): ServiceInstance @auth
}
type Query {
  userServiceOwned(
    first: Int!
    after: ID
    orderBy: UserServiceOrdering!
    orderMode: OrderingMode!
  ): UserServiceConnection @auth
  serviceUsers(
    id: ID!
    first: Int!
    after: ID
    orderBy: UserServiceOrdering!
    orderMode: OrderingMode!
  ): UserServiceConnection @auth
  userServiceFromSubscription(
    first: Int!
    after: ID
    orderBy: UserServiceOrdering!
    orderMode: OrderingMode!
    subscription_id: ID!
  ): UserServiceConnection @auth
}
type UserServiceConnection {
  totalCount: Int!
  edges: [UserServiceEdge!]!
  pageInfo: PageInfo!
}

type UserServiceEdge {
  cursor: String!
  node: UserService
}

type UserService implements Node {
  id: ID!
  subscription_id: ID!
  user_id: ID!
  user: User
  subscription: SubscriptionModel
  user_service_capability: [UserServiceCapability]
  ordering: Int
}

type UserServiceDeleted implements Node {
  id: ID!
  subscription_id: ID!
  user_id: ID!
}
