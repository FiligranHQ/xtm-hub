enum OrganizationOrdering {
    name
}

type Organization implements Node {
    id: ID!
    name: String
}

type User implements Node {
    id: ID!
    email: String!
    first_name: String
    last_name: String
    organization: Organization
}

type OrganizationEdge {
    cursor: String!
    node: Organization
}

type OrganizationConnection {
    edges: [OrganizationEdge!]!
    pageInfo: PageInfo!
}

type Query {
    me: User
    users: [User]
    organizations(first: Int = 10, after: ID, orderBy: OrganizationOrdering = name, orderMode: OrderingMode = asc): OrganizationConnection!
}

type Mutation {
    # Organization
    addUser(email: String!, password: String!, organization_id: String!): User
    addOrganization(name: String!): Organization
    # Login
    login(email: String!, password: String): User
    logout: ID!
}