enum UserOrdering {
    email
}

type Capability implements Node {
    id: ID!
    name: String!
}

type User implements Node {
    id: ID!
    email: String!
    first_name: String
    last_name: String
    organization_id: ID!
    organization: Organization!
    capabilities: [Capability!]!
}

type UserEdge {
    cursor: String!
    node: User
}

type UserConnection {
    edges: [UserEdge!]!
    pageInfo: PageInfo!
}

type UserSubscription {
    add: User
    edit: User
    delete: User
    merge: MergeEvent
}

type Subscription {
    User: UserSubscription
}

type Query {
    me: User
    user(id: ID!): User
    users(first: Int!, after: ID, orderBy: UserOrdering!, orderMode: OrderingMode!): UserConnection!
}

input EditUserInput {
    email: String!
    first_name: String
    last_name: String
    organization_id: String!
}

input AddUserInput {
    email: String!
    password: String!
    organization_id: String!
}

type Mutation {
    # Management
    mergeTest(from: ID!, target: ID!): ID!
    addUser(input: AddUserInput!): User
    editUser(id: ID!, input: EditUserInput!): User
    deleteUser(id: ID!): User
    # Login
    login(email: String!, password: String): User
    logout: ID!
}