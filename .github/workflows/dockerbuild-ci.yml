name: Run XTM Hub CI/CD
on:
  workflow_dispatch:
  push:
    branches:
      - "main"
      - "development"
    paths:
      - "portal-api/**"
      - "portal-front/**"
    tags:
      - "v*"
  pull_request:
    branches:
      - "main"
      - "development"
    paths:
      - "portal-api/**"
      - "portal-front/**"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build-images-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: true
      matrix:
        include:
          - image: portal-front
          - image: portal-api
          - image: portal-e2e-tests
    outputs:
      docker-tags: ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
      docker-labels: ${{ steps.meta.outputs.labels }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Docker meta deps
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: filigran/${{ matrix.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      - name: Build and push portal image
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.image }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=registry,ref=filigran/${{ matrix.image }}:main
            type=registry,ref=filigran/${{ matrix.image }}:development
            type=registry,ref=filigran/${{ matrix.image }}:${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          cache-to: type=registry,ref=filigran/${{ matrix.image }}:${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }},mode=max

  run-e2e-tests:
    needs: build-images-tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Install docker compose
        uses: KengoTODA/actions-setup-docker-compose@v1
        with:
          version: "2.29.6"
      - name: Launch docker compose
        run: |
          export IMAGE_TAGS=${{ needs.build-images-tests.outputs.docker-tags }}
          docker compose -f ./xtm-hub-dev/docker-compose-ci.yml run portal-e2e-tests

  run-front-unit-tests:
    needs: build-images-tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      packages: write
    if: contains(github.ref , 'refs/tags/') == false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Install docker compose
        uses: KengoTODA/actions-setup-docker-compose@v1
        with:
          version: "2.29.6"
      - name: Launch docker compose
        run: |
          export IMAGE_TAGS=${{ needs.build-images-tests.outputs.docker-tags }}
          docker compose -f ./xtm-hub-dev/docker-compose-ci.yml run portal-front-test

  run-api-unit-tests:
    needs: build-images-tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      packages: write
    if: contains(github.ref , 'refs/tags/') == false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Install docker compose
        uses: KengoTODA/actions-setup-docker-compose@v1
        with:
          version: "2.29.6"
      - name: Launch docker compose
        run: |
          export IMAGE_TAGS=${{ needs.build-images-tests.outputs.docker-tags }}
          docker compose -f ./xtm-hub-dev/docker-compose-ci.yml run portal-api-test

  build-images-prod:
    needs:
      - run-e2e-tests
      - run-front-unit-tests
      - run-api-unit-tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: true
      matrix:
        include:
          - image: portal-front
          - image: portal-api
    if: |
      always() &&
      github.event_name != 'pull_request' &&
      (needs.run-e2e-tests.result == 'success') &&
      (needs.run-front-unit-tests.result == 'skipped' || needs.run-front-unit-tests.result == 'success') &&
      (needs.run-api-unit-tests.result == 'skipped' || needs.run-api-unit-tests.result == 'success')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Docker meta deps
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: filigran/${{ matrix.image }}-prod
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            ${{ contains(github.ref, 'refs/tags/') && 'latest' }} # Add `latest` only for tags (production)
      - name: Build and push images
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.image }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=registry,ref=filigran/${{ matrix.image }}:main
            type=registry,ref=filigran/${{ matrix.image }}:development
            type=registry,ref=filigran/${{ matrix.image }}:latest
            type=registry,ref=filigran/${{ matrix.image }}:${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

  restart-deployment:
    needs: build-images-prod
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name != 'pull_request'
    steps:
      #- name: restart deployment on production
      #  run: kubectl --server=https://api.PROD.eu-west.filigran.io --token="${{ secrets.K8S_TOKEN_PROD }}" -n xtmhub rollout restart deployment
      #  if: contains(github.ref, 'refs/tags/')
      - name: restart deployment on staging
        run: kubectl --server=https://api.staging.eu-west.filigran.io --token="${{ secrets.K8S_TOKEN }}" -n xtmhub rollout restart deployment
        if: github.ref == 'refs/heads/main'
      - name: restart deployment on development
        run: kubectl --server=https://api.staging.eu-west.filigran.io --token="${{ secrets.K8S_TOKEN_DEV }}" -n 'xtmhub-dev' rollout restart deployment
        if: github.ref == 'refs/heads/development'

  post-deployment-message-to-platform:
    needs: build-images-prod
    runs-on: ubuntu-latest
    timeout-minutes: 10
    #if: contains(github.ref, 'refs/tags/')
    steps:
      - name: Post deployment message to platform
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
        run: |
          curl -X POST \
          -H 'Content-Type: application/json' \
          -d '    {
             "type":"message",
             "attachments":[
                {
                   "contentType":"application/vnd.microsoft.card.adaptive",
                   "contentUrl":null,
                   "content":{
                      "$schema":"http://adaptivecards.io/schemas/adaptive-card.json",
                      "type":"AdaptiveCard",
                      "version":"1.2",
                      "body":[
                      {
                        "type": "TextBlock",
                        "size": "large",
                        "weight": "bolder",
                        "color": "accent",
                        "text": "üöÄ XTM Hub {{ version }} Ready for Deployment",
                        "wrap": true
                      },
                      {
                        "type": "TextBlock",
                        "text": "üëã Hi team,",
                        "weight": "Bolder",
                        "spacing": "Small",
                        "wrap": true
                      },
                      {
                        "type": "TextBlock",
                        "text": "We have just built a **new version** of XTM Hub for production. Can you please restart our k8s deployment? üôè",
                        "spacing": "Medium",
                        "wrap": true
                      },
                      {
                        "type": "FactSet",
                        "facts": [
                            {
                              "title": "Version:",
                              "value": "${{ version }}"
                            },
                            {
                              "title": "Environment:",
                              "value": "Production"
                            },
                            {
                              "title": "Build Status:",
                              "value": "‚úÖ Successful"
                            }
                          ]
                        },
                        {
                          "type": "TextBlock",
                          "text": "Thanks!\n\n**- JB**",
                          "spacing": "Medium",
                          "wrap": true,
                          "horizontalAlignment": "Right"
                        }
                      ]
                   }
                }
             ]
          }' \
          $TEAMS_WEBHOOK_URL
