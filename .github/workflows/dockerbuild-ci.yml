name: Run XTM Hub CI/CD
on:
  workflow_dispatch:
  push:
    branches:
      - "main"
      - "development"
    paths:
      - "apps/portal-api/**"
      - "apps/portal-front/**"
    tags:
      - "v*"
  pull_request:
    branches:
      - "main"
      - "development"
    paths:
      - "apps/portal-api/**"
      - "apps/portal-front/**"
      - "apps/portal-e2e-tests/**"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  determine-changes:
    runs-on: ubuntu-latest
    outputs:
      has-api-changes: ${{ steps.check-changes.outputs.api }}
      has-front-changes: ${{ steps.check-changes.outputs.front }}
      has-e2e-changes: ${{ steps.check-changes.outputs.e2e }}
      base-sha: ${{ steps.setSHAs.outputs.base }}
      head-sha: ${{ steps.setSHAs.outputs.head }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Derive appropriate SHAs for base and head
        id: setSHAs
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'development'
      - run: corepack enable && corepack prepare yarn@3.8.7
      - uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: 'yarn'
      - run: yarn install --immutable
      - name: Check what changed
        id: check-changes
        run: |
          AFFECTED=$(npx nx show projects --affected --base=${{ steps.setSHAs.outputs.base }} --head=${{ steps.setSHAs.outputs.head }})
          
          echo "Affected projects:"
          echo "$AFFECTED"
          
          if echo "$AFFECTED" | grep -q "portal-api"; then
            echo "api=true" >> $GITHUB_OUTPUT
          else
            echo "api=false" >> $GITHUB_OUTPUT
          fi
          
          if echo "$AFFECTED" | grep -q "portal-front"; then
            echo "front=true" >> $GITHUB_OUTPUT
          else
            echo "front=false" >> $GITHUB_OUTPUT
          fi
          
          if echo "$AFFECTED" | grep -q "portal-e2e-tests"; then
            echo "e2e=true" >> $GITHUB_OUTPUT
          else
            echo "e2e=false" >> $GITHUB_OUTPUT
          fi
  build-source:
    needs: determine-changes
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - run: corepack enable && corepack prepare yarn@3.8.7
      - uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: 'yarn'
      - run: yarn install --immutable
      - run: yarn generate:ts #TODO run only si portal-api have changed
#      - run: npx nx --no-cloud run-many -t build -p portal-api portal-front
      - name: Build affected projects
        run: |
          npx nx --no-cloud affected:build \
            --base=${{ needs.determine-changes.outputs.base-sha }} \
            --head=${{ needs.determine-changes.outputs.head-sha }}
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-context
          path: |
            ./apps/portal-api/dist/
            ./apps/portal-front/.next/standalone
            ./apps/portal-front/.next/static
          retention-days: 1
          include-hidden-files: true
          if-no-files-found: ignore
  build-images-tests:
    needs: build-source
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: true
      matrix:
        include:
          - image: portal-front
            dockerfile: apps/portal-front/Dockerfile
          - image: portal-api
            dockerfile: apps/portal-api/Dockerfile
          - image: portal-e2e-tests
            dockerfile: apps/portal-e2e-tests/Dockerfile
    outputs:
      docker-tags: ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
      docker-labels: ${{ steps.meta.outputs.labels }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - run: corepack enable && corepack prepare yarn@3.8.7
      - uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: 'yarn'
      - run: yarn install --immutable
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-context
          path: ./apps
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Docker meta deps
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: filigran/${{ matrix.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      - name: Copy migrations
        run: |
          cp -r ./apps/portal-api/src/migrations ./apps/portal-e2e-tests/migrations
          cp -r ./apps/portal-api/tests/seeds ./apps/portal-e2e-tests/seeds
      - name: Build and push portal image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            APP_VERSION=0.0.0-e2e
          cache-from: |
            type=registry,ref=filigran/${{ matrix.image }}:main
            type=registry,ref=filigran/${{ matrix.image }}:development
            type=registry,ref=filigran/${{ matrix.image }}:cache-${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          cache-to: type=registry,ref=filigran/${{ matrix.image }}:cache-${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }},mode=max

  run-e2e-tests:
    needs: build-images-tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      packages: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - run: corepack enable && corepack prepare yarn@3.8.7
      - uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: 'yarn'
      - run: yarn install --immutable
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-context
          path: ./apps
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Install docker
        uses: docker/setup-docker-action@v4
      - name: Copy migrations
        run: |
          cp -r ./apps/portal-api/src/migrations ./apps/portal-e2e-tests/migrations
          cp -r ./apps/portal-api/tests/seeds ./apps/portal-e2e-tests/seeds
      - name: Launch docker compose
        run: |
          mkdir -p ctrf
          export IMAGE_TAGS="${{ needs.build-images-tests.outputs.docker-tags }}" \
           TEAMS_WEBHOOK_E2E="${{ secrets.TEAMS_WEBHOOK_E2E }}" \
           GITHUB_PR_TITLE="${{ github.event.pull_request.title }}" \
           GITHUB_PR_NUMBER="${{ github.event.pull_request.number }}" \
           GITHUB_RUN_ID="${{ github.run_id }}"
          docker compose -f ./xtm-hub-dev/docker-compose-ci.yml run portal-e2e-tests || TEST_EXIT_CODE=$?
          CONTAINER_ID=$(docker ps -a --filter "name=portal-e2e-tests-run" --format "{{.ID}}" | head -1)
          docker cp $CONTAINER_ID:/app/apps/portal-e2e-tests/ctrf/. ./ctrf/
          exit ${TEST_EXIT_CODE:-0}

      - name: Publish Test Report
        uses: ctrf-io/github-test-reporter@v1
        with:
          report-path: './ctrf/*.json'
          pull-request: true
          summary-report: true
          failed-report: true
          flaky-report: true
          insights-report: true
          suite-folded-report: true
          overwrite-comment: true
          report-order: 'summary-report,failed-report,flaky-report,insights-report,test-report'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Collect service logs on failure
        if: failure()
        run: |
          echo "=== Collecting logs from all services ==="
          echo ""
          echo "=== Portal API Logs ==="
          docker compose -f ./xtm-hub-dev/docker-compose-ci.yml logs --tail=100 portal-api || echo "Could not collect portal-api logs"
          echo ""
          echo "=== Portal API Test Logs ==="
          docker compose -f ./xtm-hub-dev/docker-compose-ci.yml logs --tail=100 portal-api-test || echo "Could not collect portal-api-test logs"
          echo ""
          echo "=== Portal Front Logs ==="
          docker compose -f ./xtm-hub-dev/docker-compose-ci.yml logs --tail=100 portal-front || echo "Could not collect portal-front logs"
          echo ""
          echo "=== Portal Front Test Logs ==="
          docker compose -f ./xtm-hub-dev/docker-compose-ci.yml logs --tail=100 portal-front-test || echo "Could not collect portal-front-test logs"
          echo ""
          echo "=== PostgreSQL Logs ==="
          docker compose -f ./xtm-hub-dev/docker-compose-ci.yml logs --tail=100 portal-postgres || echo "Could not collect portal-postgres logs"
          echo ""
          echo "=== MinIO Logs ==="
          docker compose -f ./xtm-hub-dev/docker-compose-ci.yml logs --tail=100 portal-minio || echo "Could not collect portal-minio logs"
          echo ""
          echo "=== E2E Tests Logs ==="
          docker compose -f ./xtm-hub-dev/docker-compose-ci.yml logs --tail=100 portal-e2e-tests || echo "Could not collect portal-e2e-tests logs"
          echo ""
          echo "=== Docker container status ==="
          docker compose -f ./xtm-hub-dev/docker-compose-ci.yml ps -a || echo "Could not get container status"

      - name: Save logs as artifacts
        if: failure()
        run: |
          mkdir -p logs
          docker compose -f ./xtm-hub-dev/docker-compose-ci.yml logs portal-api > logs/portal-api.log 2>&1 || true
          docker compose -f ./xtm-hub-dev/docker-compose-ci.yml logs portal-api-test > logs/portal-api-test.log 2>&1 || true
          docker compose -f ./xtm-hub-dev/docker-compose-ci.yml logs portal-front > logs/portal-front.log 2>&1 || true
          docker compose -f ./xtm-hub-dev/docker-compose-ci.yml logs portal-front-test > logs/portal-front-test.log 2>&1 || true
          docker compose -f ./xtm-hub-dev/docker-compose-ci.yml logs portal-postgres > logs/portal-postgres.log 2>&1 || true
          docker compose -f ./xtm-hub-dev/docker-compose-ci.yml logs portal-minio > logs/portal-minio.log 2>&1 || true
          docker compose -f ./xtm-hub-dev/docker-compose-ci.yml logs portal-e2e-tests > logs/portal-e2e-tests.log 2>&1 || true

      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: service-logs-${{ github.run_id }}
          path: logs/
          retention-days: 30

  run-front-unit-tests:
    needs: build-images-tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      packages: write
    if: contains(github.ref , 'refs/tags/') == false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - run: corepack enable && corepack prepare yarn@3.8.7
      - uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: 'yarn'
      - run: yarn install --immutable
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-context
          path: ./apps
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Install docker
        uses: docker/setup-docker-action@v4
      - name: Launch docker compose
        run: |
          export IMAGE_TAGS=${{ needs.build-images-tests.outputs.docker-tags }}
          mkdir -p coverage
          docker compose -f ./xtm-hub-dev/docker-compose-ci.yml run portal-front-test
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  run-api-unit-tests:
    needs: build-images-tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      packages: write
    if: contains(github.ref , 'refs/tags/') == false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - run: corepack enable && corepack prepare yarn@3.8.7
      - uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: 'yarn'
      - run: yarn install --immutable
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-context
          path: ./apps
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Install docker
        uses: docker/setup-docker-action@v4
      - name: Launch docker compose
        run: |
          mkdir -p coverage
          export IMAGE_TAGS=${{ needs.build-images-tests.outputs.docker-tags }}
          docker compose -f ./xtm-hub-dev/docker-compose-ci.yml run portal-api-test
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  deploy-feature-branch:
    needs: build-images-tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: |
      github.event_name == 'pull_request' &&
      contains(github.event.pull_request.labels.*.name, 'needs feature env')
    steps:
      - name: Install AWX cli
        run: pip install awxkit

      - name: Deploy
        run: |
          awx --conf.host https://awx.filigran.io \
            --conf.token ${{ secrets.AWX_TOKEN }} \
            -f human job_templates launch 'Deploy XTM Hub feature branch for testing' \
            --inventory eu-west-staging \
            --extra_vars "{\"env\":\"Development\",\"xtmhub_version\":\"pr-${{ github.event.number }}\",\"xtmhub_node_env\":\"development\"}"

  delete-feature-branch:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: |
      github.event_name == 'push' &&
      github.ref == 'refs/heads/development'
    steps:
      - name: Install AWX cli
        run: pip install awxkit

      - name: Delete
        run: |
          COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
          PR_NUMBER=$(echo "$COMMIT_MESSAGE" | grep -oE '#[0-9]+' | tail -1 | sed 's/#//')
          if [ -n "$PR_NUMBER" ]; then
            awx --conf.host https://awx.filigran.io \
              --conf.token ${{ secrets.AWX_TOKEN }} \
              -f human job_templates launch 'Delete XTM Hub feature branch for testing' \
              --inventory eu-west-staging \
              --extra_vars "{\"env\":\"Development\",\"xtmhub_version\":\"pr-$PR_NUMBER\"}"
          else
            echo "No PR number found in commit message"
          fi

  build-images-prod:
    needs:
      - run-e2e-tests
      - run-front-unit-tests
      - run-api-unit-tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: true
      matrix:
        include:
          - image: portal-front
            dockerfile: apps/portal-front/Dockerfile
          - image: portal-api
            dockerfile: apps/portal-api/Dockerfile
    if: |
      always() &&
      github.event_name != 'pull_request' &&
      (needs.run-e2e-tests.result == 'success') &&
      (needs.run-front-unit-tests.result == 'skipped' || needs.run-front-unit-tests.result == 'success') &&
      (needs.run-api-unit-tests.result == 'skipped' || needs.run-api-unit-tests.result == 'success')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - run: corepack enable && corepack prepare yarn@3.8.7
      - uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: 'yarn'
      - run: yarn install --immutable
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-context
          path: ./apps
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Docker meta deps
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: filigran/${{ matrix.image }}-prod
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            ${{ contains(github.ref, 'refs/tags/') && 'latest' }} # Add `latest` only for tags (production)
      - name: Determine version
        id: version
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            echo "VERSION=${GITHUB_REF_NAME}" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF_NAME}" == "main" ]]; then
            echo "VERSION=staging-${GITHUB_SHA::8}" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF_NAME}" == "development" ]]; then
            echo "VERSION=dev-${GITHUB_SHA::8}" >> $GITHUB_ENV
          else
            echo "VERSION=local-${GITHUB_SHA::8}" >> $GITHUB_ENV
          fi
      - name: Build and push images
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            APP_VERSION=${{ env.VERSION }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=registry,ref=filigran/${{ matrix.image }}:main
            type=registry,ref=filigran/${{ matrix.image }}:development
            type=registry,ref=filigran/${{ matrix.image }}:latest
            type=registry,ref=filigran/${{ matrix.image }}:${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}


  deploy:
    needs: build-images-prod
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: |
      always() &&
      github.event_name != 'pull_request' &&
      (needs.build-images-prod.result == 'success')
    steps:
      - name: Install AWX cli
        run: pip install awxkit
      - name: Deploy on Production
        if: contains(github.ref, 'refs/tags/')
        run: |
          export VERSION=$(echo "${GITHUB_REF_NAME}" | sed 's/^v//')
          awx --conf.host https://awx.filigran.io \
            --conf.token ${{ secrets.AWX_TOKEN }} \
            -f human job_templates launch 'Deploy XTM Hub' \
            --inventory eu-west-production \
            --extra_vars "{\"env\":\"Production\",\"xtmhub_version\":\"$VERSION\"}"
      - name: Deploy on Staging
        if: github.ref == 'refs/heads/main'
        run: |
          awx --conf.host https://awx.filigran.io \
            --conf.token ${{ secrets.AWX_TOKEN }} \
            -f human job_templates launch 'Deploy XTM Hub' \
            --inventory eu-west-staging \
            --extra_vars '{"env":"Staging"}'
      - name: Deploy on Development
        if: github.ref == 'refs/heads/development'
        run: |
          awx --conf.host https://awx.filigran.io \
            --conf.token ${{ secrets.AWX_TOKEN }} \
            -f human job_templates launch 'Deploy XTM Hub' \
            --inventory eu-west-staging \
            --extra_vars '{"env":"Development"}'
      - name: Deploy on Prerelease
        if: github.ref == 'refs/heads/development'
        run: |
          awx --conf.host https://awx.filigran.io \
            --conf.token ${{ secrets.AWX_TOKEN }} \
            -f human job_templates launch 'Deploy XTM Hub' \
            --inventory eu-west-staging \
            --extra_vars '{"env":"Prerelease"}'
