name: Run XTM Hub CI/CD
on:
  workflow_dispatch:
  push:
    branches:
      - "main"
      - "development"
    paths:
      - "portal-api/**"
      - "portal-front/**"
    tags:
      - "v*"
  pull_request:
    branches:
      - "main"
      - "development"
    paths:
      - "portal-api/**"
      - "portal-front/**"
      - "portal-e2e-tests/**"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build-images-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: true
      matrix:
        include:
          - image: portal-front
          - image: portal-api
          - image: portal-e2e-tests
    outputs:
      docker-tags: ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
      docker-labels: ${{ steps.meta.outputs.labels }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Docker meta deps
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: filigran/${{ matrix.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      - name: Build and push portal image
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.image }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            APP_VERSION=0.0.0-e2e
          cache-from: |
            type=registry,ref=filigran/${{ matrix.image }}:main
            type=registry,ref=filigran/${{ matrix.image }}:development
            type=registry,ref=filigran/${{ matrix.image }}:cache-${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          cache-to: type=registry,ref=filigran/${{ matrix.image }}:cache-${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }},mode=max

  run-e2e-tests:
    needs: build-images-tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Install docker compose
        uses: KengoTODA/actions-setup-docker-compose@v1
        with:
          version: "2.29.6"
      - name: Launch docker compose
        run: |
          export IMAGE_TAGS="${{ needs.build-images-tests.outputs.docker-tags }}" \
           TEAMS_WEBHOOK_E2E="${{ secrets.TEAMS_WEBHOOK_E2E }}" \
           GITHUB_PR_TITLE="${{ github.event.pull_request.title }}" \
           GITHUB_PR_NUMBER="${{ github.event.pull_request.number }}"
          docker compose -f ./xtm-hub-dev/docker-compose-ci.yml run portal-e2e-tests

  run-front-unit-tests:
    needs: build-images-tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      packages: write
    if: contains(github.ref , 'refs/tags/') == false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Install docker compose
        uses: KengoTODA/actions-setup-docker-compose@v1
        with:
          version: "2.29.6"
      - name: Launch docker compose
        run: |
          export IMAGE_TAGS=${{ needs.build-images-tests.outputs.docker-tags }}
          docker compose -f ./xtm-hub-dev/docker-compose-ci.yml run portal-front-test

  run-api-unit-tests:
    needs: build-images-tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      packages: write
    if: contains(github.ref , 'refs/tags/') == false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Install docker compose
        uses: KengoTODA/actions-setup-docker-compose@v1
        with:
          version: "2.29.6"
      - name: Launch docker compose
        run: |
          export IMAGE_TAGS=${{ needs.build-images-tests.outputs.docker-tags }}
          docker compose -f ./xtm-hub-dev/docker-compose-ci.yml run portal-api-test

  build-images-prod:
    needs:
      - run-e2e-tests
      - run-front-unit-tests
      - run-api-unit-tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: true
      matrix:
        include:
          - image: portal-front
          - image: portal-api
    if: |
      always() &&
      github.event_name != 'pull_request' &&
      (needs.run-e2e-tests.result == 'success') &&
      (needs.run-front-unit-tests.result == 'skipped' || needs.run-front-unit-tests.result == 'success') &&
      (needs.run-api-unit-tests.result == 'skipped' || needs.run-api-unit-tests.result == 'success')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Docker meta deps
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: filigran/${{ matrix.image }}-prod
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            ${{ contains(github.ref, 'refs/tags/') && 'latest' }} # Add `latest` only for tags (production)
      - name: Determine version
        id: version
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            echo "VERSION=${GITHUB_REF_NAME}" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF_NAME}" == "main" ]]; then
            echo "VERSION=staging-${GITHUB_SHA::8}" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF_NAME}" == "development" ]]; then
            echo "VERSION=dev-${GITHUB_SHA::8}" >> $GITHUB_ENV
          else
            echo "VERSION=local-${GITHUB_SHA::8}" >> $GITHUB_ENV
          fi
      - name: Build and push images
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.image }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            APP_VERSION=${{ env.VERSION }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=registry,ref=filigran/${{ matrix.image }}:main
            type=registry,ref=filigran/${{ matrix.image }}:development
            type=registry,ref=filigran/${{ matrix.image }}:latest
            type=registry,ref=filigran/${{ matrix.image }}:${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

  deploy:
    needs: build-images-prod
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: |
      always() &&
      github.event_name != 'pull_request' &&
      (needs.build-images-prod.result == 'success')
    steps:
      - name: Install AWX cli
        run: pip install awxkit
      - name: Deploy on Production
        if: contains(github.ref, 'refs/tags/')
        run: |
          export VERSION=$(echo "${GITHUB_REF_NAME}" | sed 's/^v//')
          awx --conf.host https://awx.filigran.io \
            --conf.token ${{ secrets.AWX_TOKEN }} \
            -f human job_templates launch 'Deploy XTM Hub' \
            --inventory eu-west-production \
            --extra_vars "{\"env\":\"Production\",\"xtmhub_version\":\"$VERSION\"}"
      - name: Deploy on Staging
        if: github.ref == 'refs/heads/main'
        run: |
          awx --conf.host https://awx.filigran.io \
            --conf.token ${{ secrets.AWX_TOKEN }} \
            -f human job_templates launch 'Deploy XTM Hub' \
            --inventory eu-west-staging \
            --extra_vars '{"env":"Staging"}'
      - name: Deploy on Development
        if: github.ref == 'refs/heads/development'
        run: |
          awx --conf.host https://awx.filigran.io \
            --conf.token ${{ secrets.AWX_TOKEN }} \
            -f human job_templates launch 'Deploy XTM Hub' \
            --inventory eu-west-staging \
            --extra_vars '{"env":"Development"}'
