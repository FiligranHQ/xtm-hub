enum OCTIPlatformContract {
  CE
  EE
}

type OCTIPlatform implements Node {
  id: ID!
  url: String!
  title: String!
  contract: OCTIPlatformContract!
  platform_id: String!
}

input OCTIPlatformInput {
  id: ID!
  url: String!
  title: String!
  contract: OCTIPlatformContract!
}

input RegisterOCTIPlatformInput {
  organizationId: ID!
  platform: OCTIPlatformInput!
}

input CanUnregisterOCTIPlatformInput {
  platformId: String!
}

type RegistrationResponse {
  token: String!
}

enum PlatformRegistrationStatus {
  registered
  unregistered
  never_registered
}

input IsOCTIPlatformRegisteredInput {
  platformId: String!
}

type IsOCTIPlatformRegisteredOrganization implements Node {
  id: ID!
}

type IsOCTIPlatformRegisteredResponse {
  status: PlatformRegistrationStatus!
  organization: IsOCTIPlatformRegisteredOrganization
}

type CanUnregisterResponse {
  isPlatformRegistered: Boolean!
  isAllowed: Boolean
  isInOrganization: Boolean
  organizationId: ID
}

input UnregisterOCTIPlatformInput {
  platformId: String!
}

input OCTIPlatformRegistrationStatusInput {
  platformId: String!
  token: String!
}

enum OCTIPlatformRegistrationStatus {
  active
  inactive
}

type OCTIPlatformRegistrationStatusResponse {
  status: OCTIPlatformRegistrationStatus!
}

type Query {
  isOCTIPlatformRegistered(
    input: IsOCTIPlatformRegisteredInput!
  ): IsOCTIPlatformRegisteredResponse! @auth
  canUnregisterOCTIPlatform(
    input: CanUnregisterOCTIPlatformInput!
  ): CanUnregisterResponse! @auth
  octiPlatforms: [OCTIPlatform!]! @auth
  octiPlatformRegistrationStatus(
    input: OCTIPlatformRegistrationStatusInput!
  ): OCTIPlatformRegistrationStatusResponse!
}

type Mutation {
  registerOCTIPlatform(
    input: RegisterOCTIPlatformInput!
  ): RegistrationResponse! @auth
  unregisterOCTIPlatform(input: UnregisterOCTIPlatformInput): Success! @auth
}
