enum ServiceInstanceOrdering {
  name
  description
  ordering
}

enum ServiceInstanceCreationStatus {
  PENDING
  CREATED
  READY
}

enum ServiceInstanceJoinType {
  JOIN_INVITE
  JOIN_ASK
  JOIN_AUTO
  JOIN_SELF
}

type ServiceInstance implements Node {
  id: ID!
  name: String!
  description: String
  slug: String
  creation_status: ServiceInstanceCreationStatus
  organization_subscribed: Boolean
  user_joined: Boolean
  links: [ServiceLink]
  organization: [Organization]
  subscriptions: [SubscriptionModel]
  capabilities: [String]!
  public: Boolean
  join_type: ServiceInstanceJoinType
  tags: [String]
  service_definition: ServiceDefinition
  logo_document_id: ID
  illustration_document_id: ID
  ordering: Int!
}

type ServiceInstanceEdge {
  cursor: String!
  node: ServiceInstance!
}

type ServiceConnection {
  totalCount: Int!
  edges: [ServiceInstanceEdge!]!
  pageInfo: PageInfo!
}
type SeoServiceInstance implements Node {
  id: ID!
  name: String!
  slug: String
  description: String
  links: [ServiceLink]
  tags: [String]
  service_definition: ServiceDefinition!
  logo_document_id: ID
  illustration_document_id: ID
}

input AddServiceInput {
  service_instance_name: String
  service_instance_description: String
  fee_type: String
  price: Int
  organization_id: String
  url: String
}

type Mutation {
  editServiceInstance(id: ID!, name: String!): ServiceInstance
    @auth(requires: [ADMINISTRATE_ORGANIZATION, MANAGE_SUBSCRIPTION])
  addServiceInstance(input: AddServiceInput): SubscriptionModel
    @auth(requires: [ADMINISTRATE_ORGANIZATION, MANAGE_SUBSCRIPTION])
  deleteServiceInstance(id: ID!): ServiceInstance
    @auth(requires: [ADMINISTRATE_ORGANIZATION, MANAGE_SUBSCRIPTION])
  addServicePicture(
    serviceInstanceId: ID!
    document: Upload
    isLogo: Boolean
  ): ServiceInstance
    @auth(requires: [ADMINISTRATE_ORGANIZATION, MANAGE_SUBSCRIPTION])
}

type Query {
  publicServiceInstances(
    first: Int!
    after: ID
    orderBy: ServiceInstanceOrdering!
    orderMode: OrderingMode!
  ): ServiceConnection! @auth
  serviceInstances(
    first: Int!
    after: ID
    orderBy: ServiceInstanceOrdering!
    orderMode: OrderingMode!
  ): ServiceConnection! @auth(requires: [BYPASS])
  serviceInstanceById(service_instance_id: ID): ServiceInstance @auth
  serviceInstanceByIdWithSubscriptions(
    service_instance_id: ID
  ): ServiceInstance @auth @service_capa(requires: [MANAGE_ACCESS])
  subscribedServiceInstancesByIdentifier(
    identifier: ServiceDefinitionIdentifier!
  ): [SubscribedServiceInstance!]! @auth
  seoServiceInstances: [SeoServiceInstance!]!
  seoServiceInstance(slug: String!): SeoServiceInstance!
}

type SubscribedServiceInstanceConfiguration {
  token: String!
  platform_id: String!
  platform_url: String!
  registerer_id: String!
  platform_title: String!
  platform_contract: OpenCTIPlatformContract!
}

type SubscribedServiceInstance {
  service_instance_id: ID!
  organization_id: ID!
  is_personal_space: Boolean!
  configurations: [SubscribedServiceInstanceConfiguration]
}

type ServiceInstanceSubscription {
  add: ServiceInstance
  edit: ServiceInstance
  delete: ServiceInstance
}

type Subscription {
  ServiceInstance: ServiceInstanceSubscription @auth
}
