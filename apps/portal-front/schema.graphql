directive @auth(requires: [Restriction] = []) repeatable on OBJECT | FIELD_DEFINITION

directive @service_capa(requires: [ServiceRestriction] = []) repeatable on OBJECT | FIELD_DEFINITION

scalar JSON

scalar Date

scalar Upload

enum FilterKey {
  label
  organization_id
  personal_space
}

input Filter {
  key: FilterKey
  value: [String!]!
}

type Success {
  success: Boolean!
}

type Mutation {
  frontendErrorLog(message: String!, codeStack: String, componentStack: String): Boolean
  addOrganization(input: OrganizationInput!): Organization
  editOrganization(id: ID!, input: OrganizationInput!): Organization
  deleteOrganization(id: ID!): Organization
  createCsvFeed(input: CreateCsvFeedInput!, document: [Upload!], serviceInstanceId: String!): CsvFeed!
  updateCsvFeed(documentId: ID!, input: UpdateCsvFeedInput!, document: [Upload!], updateDocument: Boolean!, images: [String!], serviceInstanceId: String): CsvFeed!
  deleteCsvFeed(id: ID!, serviceInstanceId: String!): CsvFeed!
  createCustomDashboard(input: CreateCustomDashboardInput!, document: [Upload!]!, serviceInstanceId: String): CustomDashboard!
  updateCustomDashboard(documentId: ID!, input: UpdateCustomDashboardInput!, document: [Upload!], updateDocument: Boolean!, images: [String!], serviceInstanceId: String): CustomDashboard!
  deleteCustomDashboard(id: ID!, serviceInstanceId: String!): CustomDashboard!
  addDocument(document: Upload, name: String, short_description: String, description: String, service_instance_id: String, parentDocumentId: ID, active: Boolean, slug: String, type: String!): Document!
  editDocument(documentId: ID, input: EditDocumentInput!, service_instance_id: String): Document!
  deleteDocument(documentId: ID, service_instance_id: String, forceDelete: Boolean): Document!
  incrementShareNumberDocument(documentId: ID): Document!
  enrollOCTIPlatform(input: EnrollOCTIPlatformInput!): EnrollmentResponse!
  unenrollOCTIPlatform(input: UnenrollOCTIPlatformInput): Success!
  createObasScenario(input: CreateObasScenarioInput!, document: [Upload!]!, serviceInstanceId: String): ObasScenario!
  updateObasScenario(documentId: ID!, input: UpdateObasScenarioInput!, document: [Upload!], updateDocument: Boolean!, images: [String!], serviceInstanceId: String): ObasScenario!
  deleteObasScenario(id: ID!, serviceInstanceId: String!): ObasScenario!
  editServiceInstance(id: ID!, name: String!): ServiceInstance
  addServiceInstance(input: AddServiceInput): SubscriptionModel
  deleteServiceInstance(id: ID!): ServiceInstance
  addServicePicture(serviceInstanceId: ID!, document: Upload, isLogo: Boolean): ServiceInstance
  addLabel(input: AddLabelInput!): Label!
  editLabel(id: ID!, input: EditLabelInput!): Label!
  deleteLabel(id: ID!): Label!
  addSubscription(service_instance_id: String): ServiceInstance
  addSubscriptionInService(service_instance_id: String, organization_id: ID, capability_ids: [ID], start_date: Date, end_date: Date): ServiceInstance
  deleteSubscription(subscription_id: ID!): ServiceInstance
  editServiceCapability(input: EditServiceCapabilityInput, serviceInstanceId: String): SubscriptionModel
  addUserService(input: UserServiceAddInput!): [UserService]
  deleteUserService(input: UserServiceDeleteInput!): UserService
  selfJoinServiceInstance(service_instance_id: ID!): ServiceInstance
  mergeTest(from: ID!, target: ID!): ID!
  addUser(input: AddUserInput!): User
  adminAddUser(input: AdminAddUserInput!): User
  adminEditUser(id: ID!, input: AdminEditUserInput!): User!
  editUserCapabilities(id: ID!, input: EditUserCapabilitiesInput!): User!
  editMeUser(input: EditMeUserInput!): User!
  changeSelectedOrganization(organization_id: ID!): User
  removeUserFromOrganization(user_id: ID!, organization_id: ID!): User
  resetPassword: Success!
  login(email: String!, password: String): User
  logout: ID!
}

enum OrganizationOrdering {
  name
}

type Organization implements Node {
  id: ID!
  name: String!
  domains: [String!]
  personal_space: Boolean!
  capabilityUser: [Capability]
}

type OrganizationEdge {
  cursor: String!
  node: Organization!
}

type OrganizationConnection {
  totalCount: Int!
  edges: [OrganizationEdge!]!
  pageInfo: PageInfo!
}

type Query {
  organization(id: ID!): Organization
  organizations(first: Int = 50, after: ID, orderBy: OrganizationOrdering!, orderMode: OrderingMode!, searchTerm: String): OrganizationConnection!
  userOrganizations: [Organization!]!
  rolePortal(id: ID!): RolePortal
  rolesPortal: [RolePortal!]!
  csvFeeds(first: Int!, after: ID, orderBy: DocumentOrdering!, orderMode: OrderingMode!, searchTerm: String, filters: [Filter!], serviceInstanceId: String): CsvFeedConnection!
  csvFeed(id: ID, serviceInstanceId: ID): CsvFeed
  seoCsvFeedsByServiceSlug(serviceSlug: String): [CsvFeed]
  seoCsvFeedBySlug(slug: String): CsvFeed
  seoCustomDashboardsByServiceSlug(serviceSlug: String): [CustomDashboard]
  seoCustomDashboardBySlug(slug: String): CustomDashboard
  customDashboards(first: Int!, after: ID, orderBy: DocumentOrdering!, orderMode: OrderingMode!, searchTerm: String, filters: [Filter!], serviceInstanceId: String): CustomDashboardConnection!
  customDashboard(id: ID, serviceInstanceId: ID): CustomDashboard
  documentExists(documentName: String, service_instance_id: String): Boolean
  documents(first: Int!, after: ID, orderBy: DocumentOrdering!, orderMode: OrderingMode!, searchTerm: String, filters: [Filter!], serviceInstanceId: String, parentsOnly: Boolean): DocumentConnection!
  document(documentId: ID, serviceInstanceId: ID): Document
  canEnrollOCTIPlatform(input: CanEnrollOCTIPlatformInput!): CanEnrollResponse!
  canUnenrollOCTIPlatform(input: CanUnenrollOCTIPlatformInput!): CanUnenrollResponse!
  octiPlatforms: [OCTIPlatform!]!
  octiPlatformEnrollmentStatus(input: OCTIPlatformEnrollmentStatusInput!): OCTIPlatformEnrollmentStatusResponse!
  seoObasScenariosByServiceSlug(serviceSlug: String): [ObasScenario]
  seoObasScenarioBySlug(slug: String): ObasScenario
  obasScenarios(first: Int!, after: ID, orderBy: DocumentOrdering!, orderMode: OrderingMode!, searchTerm: String, filters: [Filter!], serviceInstanceId: String): ObasScenarioConnection!
  obasScenario(id: ID, serviceInstanceId: ID): ObasScenario
  publicServiceInstances(first: Int!, after: ID, orderBy: ServiceInstanceOrdering!, orderMode: OrderingMode!): ServiceConnection!
  serviceInstances(first: Int!, after: ID, orderBy: ServiceInstanceOrdering!, orderMode: OrderingMode!): ServiceConnection!
  serviceInstanceById(service_instance_id: ID): ServiceInstance
  serviceInstanceByIdWithSubscriptions(service_instance_id: ID): ServiceInstance
  subscribedServiceInstancesByIdentifier(identifier: ServiceDefinitionIdentifier!): [SubscribedServiceInstance!]!
  seoServiceInstances: [SeoServiceInstance!]!
  seoServiceInstance(slug: String!): SeoServiceInstance!
  labels(first: Int!, after: ID, orderBy: LabelOrdering!, orderMode: OrderingMode!, searchTerm: String): LabelConnection
  label(id: ID!): Label
  settings: Settings!
  subscriptionById(subscription_id: ID): SubscriptionModel
  userServiceOwned(first: Int!, after: ID, orderBy: UserServiceOrdering!, orderMode: OrderingMode!): UserServiceConnection
  serviceUsers(id: ID!, first: Int!, after: ID, orderBy: UserServiceOrdering!, orderMode: OrderingMode!): UserServiceConnection
  userServiceFromSubscription(first: Int!, after: ID, orderBy: UserServiceOrdering!, orderMode: OrderingMode!, subscription_id: ID!): UserServiceConnection
  me: User
  user(id: ID!): User
  organizationAdministrators(organizationId: ID!): [User!]!
  users(first: Int!, after: ID, orderBy: UserOrdering!, orderMode: OrderingMode!, searchTerm: String, filters: [Filter!]): UserConnection!
  userHasOrganizationWithSubscription: Boolean!
  node(id: ID!): Node
}

input OrganizationInput {
  name: String!
  domains: [String!]
}

type RolePortal implements Node {
  id: ID!
  name: String!
}

enum ServiceConfigurationStatus {
  active
  inactive
}

type CsvFeed implements DocumentBase & Node {
  id: ID!
  type: String!
  uploader: User
  uploader_organization: Organization
  service_instance_id: String!
  name: String!
  short_description: String!
  description: String!
  file_name: String!
  minio_name: String!
  active: Boolean!
  created_at: Date!
  updated_at: Date
  updater_id: String
  download_number: Int!
  share_number: Int!
  children_documents: [ShareableResourceImage!]
  slug: String!
  service_instance: ServiceInstance
  subscription: SubscriptionModel
  remover_id: ID
  labels: [Label!]
}

input CreateCsvFeedInput {
  name: String!
  slug: String!
  uploader_id: String!
  short_description: String!
  description: String!
  active: Boolean!
  labels: [String!]
}

input UpdateCsvFeedInput {
  name: String
  slug: String
  short_description: String
  description: String
  active: Boolean
  labels: [String!]
  uploader_organization_id: String
  uploader_id: String
}

type CsvFeedEdge {
  cursor: String!
  node: CsvFeed!
}

type CsvFeedConnection {
  totalCount: Int!
  edges: [CsvFeedEdge!]!
  pageInfo: PageInfo!
}

input CreateCustomDashboardInput {
  name: String!
  slug: String!
  short_description: String!
  description: String!
  active: Boolean!
  labels: [String!]
  uploader_id: String!
  product_version: String!
}

input UpdateCustomDashboardInput {
  name: String
  slug: String
  short_description: String
  description: String
  active: Boolean
  labels: [String!]
  uploader_organization_id: String
  uploader_id: String
  product_version: String
}

type CustomDashboard implements DocumentBase & Node {
  id: ID!
  type: String!
  uploader: User
  uploader_organization: Organization
  service_instance_id: String!
  name: String!
  short_description: String!
  description: String!
  file_name: String!
  minio_name: String!
  active: Boolean!
  created_at: Date!
  updated_at: Date
  updater_id: String
  download_number: Int!
  share_number: Int!
  children_documents: [ShareableResourceImage!]
  slug: String!
  service_instance: ServiceInstance
  subscription: SubscriptionModel
  labels: [Label!]
  product_version: String
}

type CustomDashboardEdge {
  cursor: String!
  node: CustomDashboard!
}

type CustomDashboardConnection {
  totalCount: Int!
  edges: [CustomDashboardEdge!]!
  pageInfo: PageInfo!
}

enum ServiceDefinitionIdentifier {
  vault
  link
  custom_dashboards
  csv_feeds
  obas_scenarios
  octi_enrollment
}

type ServiceDefinition implements Node {
  id: ID!
  name: String!
  description: String
  public: Boolean
  identifier: ServiceDefinitionIdentifier!
  service_capability: [ServiceCapability]
}

type ShareableResourceImage {
  id: ID!
  file_name: String!
}

enum DocumentOrdering {
  file_name
  description
  created_at
  download_number
}

interface DocumentBase implements Node {
  id: ID!
  type: String!
  uploader: User
  uploader_organization: Organization
  service_instance_id: String!
  name: String!
  short_description: String!
  description: String!
  file_name: String!
  minio_name: String!
  active: Boolean!
  created_at: Date!
  updated_at: Date
  updater_id: String
  download_number: Int!
  share_number: Int!
  children_documents: [ShareableResourceImage!]
  slug: String!
  service_instance: ServiceInstance
  subscription: SubscriptionModel
}

type Document implements Node {
  id: ID!
  type: String!
  uploader: User
  uploader_organization: Organization
  service_instance_id: String!
  name: String
  short_description: String!
  description: String!
  file_name: String!
  minio_name: String!
  active: Boolean!
  created_at: Date!
  updated_at: Date
  updater_id: String
  download_number: Int!
  share_number: Int!
  children_documents: [ShareableResourceImage!]
  slug: String!
  service_instance: ServiceInstance
  subscription: SubscriptionModel
}

input EditDocumentInput {
  short_description: String
  description: String
  uploader_organization_id: String
  name: String
  active: Boolean
  slug: String
}

type DocumentEdge {
  cursor: String!
  node: Document!
}

type DocumentConnection {
  totalCount: Int!
  edges: [DocumentEdge!]!
  pageInfo: PageInfo!
}

enum OCTIPlatformContract {
  CE
  EE
}

type OCTIPlatform implements Node {
  id: ID!
  url: String!
  title: String!
  contract: OCTIPlatformContract!
  platform_id: String!
}

input OCTIPlatformInput {
  id: ID!
  url: String!
  title: String!
  contract: OCTIPlatformContract!
}

input EnrollOCTIPlatformInput {
  organizationId: ID!
  platform: OCTIPlatformInput!
}

input CanEnrollOCTIPlatformInput {
  organizationId: ID!
  platformId: String!
}

input CanUnenrollOCTIPlatformInput {
  platformId: String!
}

type EnrollmentResponse {
  token: String!
}

enum CanEnrollStatus {
  enrolled
  unenrolled
  never_enrolled
}

type CanEnrollResponse {
  isAllowed: Boolean!
  status: CanEnrollStatus!
  isSameOrganization: Boolean
}

type CanUnenrollResponse {
  isPlatformEnrolled: Boolean!
  isAllowed: Boolean
  organizationId: ID
}

input UnenrollOCTIPlatformInput {
  platformId: String!
}

input OCTIPlatformEnrollmentStatusInput {
  platformId: String!
  token: String!
}

enum OCTIPlatformEnrollmentStatus {
  active
  inactive
}

type OCTIPlatformEnrollmentStatusResponse {
  status: OCTIPlatformEnrollmentStatus!
}

type ServiceLink implements Node {
  id: ID!
  service_instance_id: ID
  url: String
  name: String
}

input CreateObasScenarioInput {
  name: String!
  slug: String!
  short_description: String!
  description: String!
  active: Boolean!
  labels: [String!]
  uploader_id: String!
  product_version: String!
}

input UpdateObasScenarioInput {
  name: String
  slug: String
  short_description: String
  description: String
  active: Boolean
  labels: [String!]
  uploader_organization_id: String
  uploader_id: String
  product_version: String
}

type ObasScenario implements DocumentBase & Node {
  id: ID!
  type: String!
  uploader: User
  uploader_organization: Organization
  service_instance_id: String!
  name: String!
  short_description: String!
  description: String!
  file_name: String!
  minio_name: String!
  active: Boolean!
  created_at: Date!
  updated_at: Date
  updater_id: String
  download_number: Int!
  share_number: Int!
  children_documents: [ShareableResourceImage!]
  slug: String!
  service_instance: ServiceInstance
  subscription: SubscriptionModel
  labels: [Label!]
  product_version: String
}

type ObasScenarioEdge {
  cursor: String!
  node: ObasScenario!
}

type ObasScenarioConnection {
  totalCount: Int!
  edges: [ObasScenarioEdge!]!
  pageInfo: PageInfo!
}

enum ServiceInstanceOrdering {
  name
  description
  ordering
}

enum ServiceInstanceCreationStatus {
  PENDING
  CREATED
  READY
}

enum ServiceInstanceJoinType {
  JOIN_INVITE
  JOIN_ASK
  JOIN_AUTO
  JOIN_SELF
}

type ServiceInstance implements Node {
  id: ID!
  name: String!
  description: String
  slug: String
  creation_status: ServiceInstanceCreationStatus
  organization_subscribed: Boolean
  user_joined: Boolean
  links: [ServiceLink]
  organization: [Organization]
  subscriptions: [SubscriptionModel]
  capabilities: [String]!
  public: Boolean
  join_type: ServiceInstanceJoinType
  tags: [String]
  service_definition: ServiceDefinition
  logo_document_id: ID
  illustration_document_id: ID
  ordering: Int!
}

type ServiceInstanceEdge {
  cursor: String!
  node: ServiceInstance!
}

type ServiceConnection {
  totalCount: Int!
  edges: [ServiceInstanceEdge!]!
  pageInfo: PageInfo!
}

type SeoServiceInstance implements Node {
  id: ID!
  name: String!
  slug: String
  description: String
  links: [ServiceLink]
  tags: [String]
  service_definition: ServiceDefinition!
  logo_document_id: ID
  illustration_document_id: ID
}

input AddServiceInput {
  service_instance_name: String
  service_instance_description: String
  fee_type: String
  price: Int
  organization_id: String
  url: String
}

type SubscribedServiceInstance {
  service_instance_id: ID!
  organization_id: ID!
  is_personal_space: Boolean!
  links: [ServiceLink]
}

type ServiceInstanceSubscription {
  add: ServiceInstance
  edit: ServiceInstance
  delete: ServiceInstance
}

type Subscription {
  ServiceInstance: ServiceInstanceSubscription
  ActionTracking: TrackingSubscription
  User: UserSubscription
  MeUser: MeUserSubscription
}

type Label implements Node {
  id: ID!
  name: String!
  color: String!
}

enum LabelOrdering {
  name
  color
}

type LabelEdge {
  cursor: String!
  node: Label!
}

type LabelConnection {
  totalCount: Int!
  edges: [LabelEdge!]!
  pageInfo: PageInfo!
}

input AddLabelInput {
  name: String!
  color: String!
}

input EditLabelInput {
  name: String
  color: String
}

type PlatformProvider {
  name: String!
  type: String!
  provider: String!
}

type Settings {
  platform_feature_flags: [String!]!
  platform_providers: [PlatformProvider!]!
  base_url_front: String!
  environment: String!
}

enum SubscriptionOrdering {
  organization_name
  start_date
  end_date
  status
  service_name
  service_provider
  service_type
  service_description
}

type SubscriptionModel implements Node {
  id: ID!
  organization_id: ID!
  service_instance_id: ID!
  start_date: Date
  end_date: Date
  status: String
  organization: Organization!
  service_url: String!
  service_instance: ServiceInstance
  subscription_capability: [SubscriptionCapability]
  user_service: [UserService]!
}

type SubscriptionEdge {
  cursor: String!
  node: SubscriptionModel!
}

type ActionTracking implements Node {
  id: ID!
  contextual_id: String!
  status: String
  created_at: Date!
  ended_at: Date
  type: String!
  message_tracking: [MessageTracking!]!
}

type MessageTracking implements Node {
  id: ID!
  tracking_id: ID
  created_at: Date!
  technical: Boolean
  type: String!
  tracking_info: JSON
}

type TrackingSubscription {
  add: ActionTracking
  edit: ActionTracking
  delete: ActionTracking
}

type GenericServiceCapability implements Node {
  id: ID!
  name: String
}

input EditServiceCapabilityInput {
  user_service_id: String
  capabilities: [String]!
}

type UserServiceCapability implements Node {
  id: ID!
  user_service_id: ID!
  generic_service_capability: GenericServiceCapability
  subscription_capability: SubscriptionCapability
}

type SubscriptionCapability implements Node {
  id: ID!
  service_capability: ServiceCapability
}

type ServiceCapability implements Node {
  id: ID!
  name: String
  description: String
  service_definition_id: ID
}

enum UserServiceOrdering {
  first_name
  last_name
  email
  service_name
  service_provider
  service_type
  service_description
  subscription_status
  ordering
}

input UserServiceAddInput {
  email: [String!]!
  capabilities: [String]
  subscriptionId: ID!
}

input UserServiceDeleteInput {
  email: String!
  capabilities: [String]
  subscriptionId: String!
}

type UserServiceConnection {
  totalCount: Int!
  edges: [UserServiceEdge!]!
  pageInfo: PageInfo!
}

type UserServiceEdge {
  cursor: String!
  node: UserService
}

type UserService implements Node {
  id: ID!
  subscription_id: ID!
  user_id: ID!
  user: User
  subscription: SubscriptionModel
  user_service_capability: [UserServiceCapability]
  ordering: Int
}

type UserServiceDeleted implements Node {
  id: ID!
  subscription_id: ID!
  user_id: ID!
}

enum UserOrdering {
  email
  first_name
  last_name
  disabled
  country
  last_login
}

type Capability implements Node {
  id: ID!
  name: Restriction!
}

type OrganizationCapabilities implements Node {
  id: ID!
  organization: Organization!
  capabilities: [OrganizationCapability!]
}

type User implements Node {
  id: ID!
  email: String!
  first_name: String
  last_name: String
  picture: String
  country: String
  disabled: Boolean
  selected_organization_id: String
  organizations: [Organization!]
  organization_capabilities: [OrganizationCapabilities!]
  capabilities: [Capability!]
  roles_portal: [RolePortal!]
  selected_org_capabilities: [OrganizationCapability!]
  last_login: Date
}

type UserEdge {
  cursor: String!
  node: User!
}

type UserConnection {
  totalCount: Int!
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

input AdminEditUserInput {
  disabled: Boolean
  first_name: String
  last_name: String
  email: String
  organization_capabilities: [OrganizationCapabilitiesInput!]
}

input EditUserCapabilitiesInput {
  capabilities: [String!]
}

input EditMeUserInput {
  first_name: String
  last_name: String
  picture: String
  country: String
}

input OrganizationCapabilitiesInput {
  organization_id: ID!
  capabilities: [String!]
}

input AddUserInput {
  email: String!
  password: String
  capabilities: [String!]
}

input AdminAddUserInput {
  email: String!
  first_name: String
  last_name: String
  password: String
  organization_capabilities: [OrganizationCapabilitiesInput!]
}

type UserSubscription {
  add: User
  edit: User
  delete: User
  merge: MergeEvent
}

type MeUserSubscription {
  edit: User
  delete: User
}

enum Restriction {
  BYPASS
  ADMINISTRATE_ORGANIZATION
  MANAGE_ACCESS
  MANAGE_SUBSCRIPTION
  BCK_MANAGE_SERVICES
  BCK_MANAGE_COMMUNITIES
  FRT_SERVICE_SUBSCRIBER
  FRT_MANAGE_SETTINGS
  FRT_ACCESS_BILLING
  FRT_MANAGE_USER
  FRT_ACCESS_SERVICES
  MANAGE_OCTI_ENROLLMENT
}

enum OrganizationCapability {
  ADMINISTRATE_ORGANIZATION
  MANAGE_ACCESS
  MANAGE_SUBSCRIPTION
  MANAGE_OCTI_ENROLLMENT
}

enum ServiceRestriction {
  ACCESS_USER
  MANAGE_ACCESS
  UPLOAD
  DELETE
}

interface Node {
  id: ID!
}

enum OrderingMode {
  asc
  desc
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type MergeEvent implements Node {
  id: ID!
  from: ID!
  target: ID!
}