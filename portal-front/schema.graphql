directive @auth(requires: [Restriction] = []) repeatable on OBJECT | FIELD_DEFINITION

enum Restriction {
  BYPASS
  ADMIN
  USER
}

interface Node {
  id: ID!
}

enum OrderingMode {
  asc
  desc
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type MergeEvent implements Node {
  id: ID!
  from: ID!
  target: ID!
}

type Query {
  node(id: ID!): Node
  me: User
  user(id: ID!): User
  users(first: Int!, after: ID, orderBy: UserOrdering!, orderMode: OrderingMode!): UserConnection!
  settings: Settings!
  services(first: Int!, after: ID, orderBy: ServiceOrdering!, orderMode: OrderingMode!): ServiceConnection!
  rolePortal(id: ID!): RolePortal
  rolesPortal: [RolePortal!]!
  organization(id: ID!): Organization
  organizations(first: Int = 10, after: ID, orderBy: OrganizationOrdering = name, orderMode: OrderingMode = asc): OrganizationConnection!
}

enum UserOrdering {
  email
}

type Capability implements Node {
  id: ID!
  name: Restriction!
}

type User implements Node {
  id: ID!
  email: String!
  first_name: String
  last_name: String
  organization_id: ID!
  organization: Organization!
  capabilities: [Capability!]!
  tracking_data: [ActionTracking]
  roles_portal_id: [RolePortalID!]!
}

type UserEdge {
  cursor: String!
  node: User
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type UserSubscription {
  add: User
  edit: User
  delete: User
  merge: MergeEvent
}

type Subscription {
  User: UserSubscription
  ActionTracking: TrackingSubscription
  Service: ServiceSubscription
}

input EditUserInput {
  email: String!
  first_name: String
  last_name: String
  organization_id: String!
  roles_portal_id: [String]!
}

input AddUserInput {
  email: String!
  password: String!
  organization_id: String!
  first_name: String!
  last_name: String!
  roles_id: [String]!
}

type Mutation {
  mergeTest(from: ID!, target: ID!): ID!
  addUser(input: AddUserInput!): User
  editUser(id: ID!, input: EditUserInput!): User
  deleteUser(id: ID!): User
  login(email: String!, password: String): User
  logout: ID!
  editService(id: ID!, name: String!): Service
  addService(name: String!): Service
  deleteService(id: ID!): Service
  addOrganization(name: String!): Organization
}

type ActionTracking implements Node {
  id: ID!
  contextual_id: String!
  status: String
  created_at: Date!
  ended_at: Date
  message_tracking: [MessageTracking!]!
}

type MessageTracking implements Node {
  id: ID!
  tracking_id: ID
  created_at: Date!
  technical: Boolean
  type: String!
  tracking_info: JSON
}

type TrackingSubscription {
  add: ActionTracking
  edit: ActionTracking
  delete: ActionTracking
}

type PlatformProvider {
  name: String!
  type: String!
  provider: String!
}

type Settings {
  platform_providers: [PlatformProvider!]!
}

enum ServiceOrdering {
  name
}

type Service implements Node {
  id: ID!
  name: String!
  description: String
}

type ServiceEdge {
  cursor: String!
  node: Service!
}

type ServiceConnection {
  edges: [ServiceEdge!]!
  pageInfo: PageInfo!
}

type ServiceSubscription {
  add: Service
  edit: Service
  delete: Service
}

type RolePortal implements Node {
  id: ID!
  name: String!
}

type RolePortalID implements Node {
  id: ID!
}

enum OrganizationOrdering {
  name
}

type Organization implements Node {
  id: ID!
  name: String
}

type OrganizationEdge {
  cursor: String!
  node: Organization!
}

type OrganizationConnection {
  edges: [OrganizationEdge!]!
  pageInfo: PageInfo!
}

scalar JSON

scalar Date