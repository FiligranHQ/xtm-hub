directive @auth(requires: [Restriction] = []) repeatable on OBJECT | FIELD_DEFINITION

directive @service_capa(requires: [ServiceRestriction] = []) repeatable on OBJECT | FIELD_DEFINITION

scalar JSON

scalar Date

scalar Upload

enum FilterKey {
  label
}

input Filter {
  key: FilterKey
  value: [String!]!
}

type Mutation {
  frontendErrorLog(message: String!, codeStack: String, componentStack: String): Boolean
  addOrganization(input: OrganizationInput!): Organization
  editOrganization(id: ID!, input: OrganizationInput!): Organization
  deleteOrganization(id: ID!): Organization
  addDocument(document: Upload, name: String, short_description: String, description: String, service_instance_id: String, parentDocumentId: ID, labels: [String!], active: Boolean): Document!
  editDocument(documentId: ID, input: EditDocumentInput!, service_instance_id: String): Document!
  deleteDocument(documentId: ID, service_instance_id: String, forceDelete: Boolean): Document!
  editServiceInstance(id: ID!, name: String!): ServiceInstance
  addServiceInstance(input: AddServiceInput): Subscription
  deleteServiceInstance(id: ID!): ServiceInstance
  addServicePicture(serviceId: ID, document: Upload, isLogo: Boolean): ServiceInstance
  addLabel(input: AddLabelInput!): Label!
  editLabel(id: ID!, input: EditLabelInput!): Label!
  deleteLabel(id: ID!): Label!
  addSubscription(service_instance_id: String): ServiceInstance
  addSubscriptionInService(service_instance_id: String, organization_id: ID, capability_ids: [ID]): ServiceInstance
  deleteSubscription(subscription_id: ID!): ServiceInstance
  editServiceCapability(input: EditServiceCapabilityInput): Subscription
  addUserService(input: UserServiceAddInput!): Subscription
  deleteUserService(input: UserServiceDeleteInput!): Subscription
  selfJoinServiceInstance(service_instance_id: ID!): ServiceInstance
  mergeTest(from: ID!, target: ID!): ID!
  addUser(input: AddUserInput!): User
  editUser(id: ID!, input: EditUserInput!): User!
  editMeUser(input: EditMeUserInput!): User!
  changeSelectedOrganization(organization_id: ID!): User
  removeUserFromOrganization(user_id: ID!, organization_id: ID!): User
  login(email: String!, password: String): User
  logout: ID!
}

enum OrganizationOrdering {
  name
}

type Organization implements Node {
  id: ID!
  name: String!
  domains: [String!]
  personal_space: Boolean!
}

type OrganizationEdge {
  cursor: String!
  node: Organization!
}

type OrganizationConnection {
  totalCount: Int!
  edges: [OrganizationEdge!]!
  pageInfo: PageInfo!
}

input OrganizationFilter {
  search: String
}

type Query {
  organization(id: ID!): Organization
  organizations(first: Int = 50, after: ID, orderBy: OrganizationOrdering!, orderMode: OrderingMode!, filter: OrganizationFilter): OrganizationConnection!
  rolePortal(id: ID!): RolePortal
  rolesPortal: [RolePortal!]!
  documentExists(documentName: String, service_instance_id: String): Boolean
  documents(first: Int!, after: ID, orderBy: DocumentOrdering!, orderMode: OrderingMode!, filter: String, filters: [Filter!], serviceInstanceId: String, parentsOnly: Boolean): DocumentConnection!
  document(documentId: ID, serviceInstanceId: ID): Document
  publicServiceInstances(first: Int!, after: ID, orderBy: ServiceInstanceOrdering!, orderMode: OrderingMode!): ServiceConnection!
  serviceInstances(first: Int!, after: ID, orderBy: ServiceInstanceOrdering!, orderMode: OrderingMode!): ServiceConnection!
  serviceInstanceById(service_instance_id: ID): ServiceInstance
  serviceInstanceByIdWithSubscriptions(service_instance_id: ID): ServiceInstance
  labels(first: Int!, after: ID, orderBy: LabelOrdering!, orderMode: OrderingMode!): LabelConnection
  label(id: ID!): Label
  settings: Settings!
  userServiceOwned(first: Int!, after: ID, orderBy: UserServiceOrdering!, orderMode: OrderingMode!): UserServiceConnection
  serviceUsers(id: ID!, first: Int!, after: ID, orderBy: UserServiceOrdering!, orderMode: OrderingMode!): UserServiceConnection
  me: User
  user(id: ID!): User
  users(first: Int!, after: ID, orderBy: UserOrdering!, orderMode: OrderingMode!, filter: UserFilter): UserConnection!
  userHasOrganizationWithSubscription: Boolean!
  node(id: ID!): Node
}

input OrganizationInput {
  name: String!
  domains: [String!]
}

type RolePortal implements Node {
  id: ID!
  name: String!
}

enum ServiceDefinitionIdentifier {
  vault
  link
  custom_dashboards
}

type ServiceDefinition implements Node {
  id: ID!
  name: String!
  description: String
  public: Boolean
  identifier: ServiceDefinitionIdentifier!
  service_capability: [ServiceCapability]
}

enum DocumentOrdering {
  file_name
  description
  created_at
  download_number
}

type Document implements Node {
  id: ID!
  uploader: User
  service_instance_id: String!
  name: String
  short_description: String
  description: String
  file_name: String!
  minio_name: String!
  active: Boolean!
  created_at: Date!
  updated_at: Date
  updater_id: String
  download_number: Int
  children_documents: [Document!]
  labels: [Label!]!
}

input EditDocumentInput {
  short_description: String
  labels: [String!]
  description: String
  name: String
  active: Boolean
}

type DocumentEdge {
  cursor: String!
  node: Document!
}

type DocumentConnection {
  totalCount: Int!
  edges: [DocumentEdge!]!
  pageInfo: PageInfo!
}

type ServiceLink implements Node {
  id: ID!
  service_instance_id: ID
  url: String
  name: String
}

enum ServiceInstanceOrdering {
  name
  description
}

type ServiceInstance implements Node {
  id: ID!
  name: String!
  description: String
  creation_status: String
  organization_subscribed: Boolean
  user_joined: Boolean
  links: [ServiceLink]
  organization: [Organization]
  subscriptions: [Subscription]
  capabilities: [String]
  public: Boolean
  join_type: String
  tags: [String]
  service_definition: ServiceDefinition
  logo_document_id: ID
  illustration_document_id: ID
}

type ServiceInstanceEdge {
  cursor: String!
  node: ServiceInstance!
}

type ServiceConnection {
  totalCount: Int!
  edges: [ServiceInstanceEdge!]!
  pageInfo: PageInfo!
}

input AddServiceInput {
  service_instance_name: String
  service_instance_description: String
  fee_type: String
  price: Int
  organization_id: String
  url: String
}

type ServiceInstanceSubscription {
  add: ServiceInstance
  edit: ServiceInstance
  delete: ServiceInstance
}

type Subscription implements Node {
  ServiceInstance: ServiceInstanceSubscription
  id: ID!
  organization_id: ID!
  service_instance_id: ID!
  start_date: Date
  end_date: Date
  status: String
  organization: Organization!
  service_url: String!
  service_instance: ServiceInstance
  subscription_capability: [SubscriptionCapability]
  user_service: [UserService]!
  ActionTracking: TrackingSubscription
  User: UserSubscription
  MeUser: MeUserSubscription
}

type Label implements Node {
  id: ID!
  name: String!
  color: String!
}

enum LabelOrdering {
  name
}

type LabelEdge {
  cursor: String!
  node: Label!
}

type LabelConnection {
  totalCount: Int!
  edges: [LabelEdge!]!
  pageInfo: PageInfo!
}

input AddLabelInput {
  name: String!
  color: String!
}

input EditLabelInput {
  name: String
  color: String
}

type PlatformProvider {
  name: String!
  type: String!
  provider: String!
}

type Settings {
  platform_providers: [PlatformProvider!]!
}

enum SubscriptionOrdering {
  organization_name
  start_date
  end_date
  status
  service_name
  service_provider
  service_type
  service_description
}

type SubscriptionEdge {
  cursor: String!
  node: Subscription!
}

type ActionTracking implements Node {
  id: ID!
  contextual_id: String!
  status: String
  created_at: Date!
  ended_at: Date
  type: String!
  message_tracking: [MessageTracking!]!
}

type MessageTracking implements Node {
  id: ID!
  tracking_id: ID
  created_at: Date!
  technical: Boolean
  type: String!
  tracking_info: JSON
}

type TrackingSubscription {
  add: ActionTracking
  edit: ActionTracking
  delete: ActionTracking
}

type GenericServiceCapability implements Node {
  id: ID!
  name: String
}

input EditServiceCapabilityInput {
  user_service_id: String
  capabilities: [String]!
}

type UserServiceCapability implements Node {
  id: ID!
  user_service_id: ID!
  generic_service_capability: GenericServiceCapability
  subscription_capability: SubscriptionCapability
}

type SubscriptionCapability implements Node {
  id: ID!
  service_capability: ServiceCapability
}

type ServiceCapability implements Node {
  id: ID!
  name: String
  description: String
  service_definition_id: ID
}

enum UserServiceOrdering {
  first_name
  last_name
  email
  service_name
  service_provider
  service_type
  service_description
  subscription_status
}

input UserServiceAddInput {
  email: [String!]!
  capabilities: [String]
  serviceInstanceId: String!
  organizationId: String!
}

input UserServiceDeleteInput {
  email: String!
  capabilities: [String]
  subscriptionId: String!
}

type UserServiceConnection {
  totalCount: Int!
  edges: [UserServiceEdge!]!
  pageInfo: PageInfo!
}

type UserServiceEdge {
  cursor: String!
  node: UserService
}

type UserService implements Node {
  id: ID!
  subscription_id: ID!
  user_id: ID!
  user: User
  subscription: Subscription
  user_service_capability: [UserServiceCapability]
}

type UserServiceDeleted implements Node {
  id: ID!
  subscription_id: ID!
  user_id: ID!
}

enum UserOrdering {
  email
  first_name
  last_name
  disabled
}

type Capability implements Node {
  id: ID!
  name: Restriction!
}

type User implements Node {
  id: ID!
  email: String!
  first_name: String
  last_name: String
  picture: String
  disabled: Boolean
  selected_organization_id: String
  organizations: [Organization!]
  capabilities: [Capability!]
  roles_portal: [RolePortal!]
}

type UserEdge {
  cursor: String!
  node: User!
}

type UserConnection {
  totalCount: Int!
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

input UserFilter {
  search: String
  organization: String
}

input EditUserInput {
  disabled: Boolean
  first_name: String
  last_name: String
  email: String
  organizations: [String]
  roles_id: [String]
}

input EditMeUserInput {
  first_name: String!
  last_name: String!
}

input AddUserInput {
  email: String!
  first_name: String
  last_name: String
  password: String
  organizations: [String]!
  roles_id: [String]!
}

type UserSubscription {
  add: User
  edit: User
  delete: User
  merge: MergeEvent
}

type MeUserSubscription {
  edit: User
  delete: User
}

enum Restriction {
  BYPASS
  BCK_MANAGE_SERVICES
  BCK_MANAGE_COMMUNITIES
  FRT_SERVICE_SUBSCRIBER
  FRT_MANAGE_SETTINGS
  FRT_ACCESS_BILLING
  FRT_MANAGE_USER
  FRT_ACCESS_SERVICES
}

enum ServiceRestriction {
  ACCESS_USER
  MANAGE_ACCESS
  UPLOAD
  DELETE
}

interface Node {
  id: ID!
}

enum OrderingMode {
  asc
  desc
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type MergeEvent implements Node {
  id: ID!
  from: ID!
  target: ID!
}