'use client';
import { MalwareAnalysisResultSheet } from '@/components/malware-analysis/malware-analysis-result-sheet';
import { subscription } from '@/components/malware-analysis/malware-analysis.graphql';
import { getMalwareAnalysis } from '@/components/malware-analysis/malware-analysis.service';
import { FormatDate } from '@/utils/date';
import { ColumnDef, PaginationState } from '@tanstack/react-table';
import { DataTable } from 'filigran-ui/clients';
import { Badge } from 'filigran-ui/servers';
import { Suspense, useMemo, useState } from 'react';
import { useSubscription } from 'react-relay';
import { malwareAnalysis_fragment$data } from '../../../__generated__/malwareAnalysis_fragment.graphql';

export const malwareAnalysisColumns: ColumnDef<malwareAnalysis_fragment$data>[] =
  [
    {
      id: 'name',
      accessorKey: 'name',
      header: 'Name',
      enableSorting: false,
    },
    {
      id: 'type',
      accessorKey: 'type',
      header: 'Type',
      enableSorting: false,
      cell: (info) => (
        <Badge variant={info.getValue() === 'STRING' ? 'default' : 'secondary'}>
          {info.getValue() as string}
        </Badge>
      ),
    },
    {
      id: 'created_at',
      accessorKey: 'created_at',
      header: 'Created At',
      enableSorting: false,
      cell: (info) => <>{FormatDate(info.getValue() as string)}</>,
    },
    {
      id: 'ended_at',
      accessorKey: 'ended_at',
      header: 'Ended At',
      enableSorting: false,
      cell: (info) => <>{FormatDate(info.getValue() as string)}</>,
    },
    {
      id: 'status',
      accessorKey: 'status',
      header: 'Status',
      enableSorting: false,
    },
    {
      id: 'details',
      cell: ({ row }) => {
        return row.original.status.toUpperCase() === 'DONE' ? (
          <MalwareAnalysisResultSheet
            result={row.original.result}
            name={row.original.name}
          />
        ) : null;
      },
      enableHiding: false,
      enableSorting: false,
      enableResizing: false,
    },
  ];

export const MalwareAnalysisList = () => {
  const [pagination, setPagination] = useState<PaginationState>({
    pageIndex: 0,
    pageSize: 50,
  });
  const [data, refetch] = getMalwareAnalysis();
  const columnData = data.malwareAnalysis.edges.map(
    ({ node }) => node as malwareAnalysis_fragment$data
  );
  const connectionID = data?.malwareAnalysis?.__id;

  const config = useMemo(
    () => ({
      variables: { connections: [connectionID] },
      subscription,
    }),
    [connectionID]
  );

  useSubscription(config);

  return (
    <Suspense
      fallback={
        <DataTable
          columns={malwareAnalysisColumns}
          isLoading={true}
          data={[]}
        />
      }>
      <DataTable
        columns={malwareAnalysisColumns}
        data={columnData}
        tableOptions={{
          onPaginationChange: setPagination,
          manualPagination: true,
        }}
        tableState={{ pagination }}
      />
    </Suspense>
  );
};
