'use client';
import { Form, FormLabel } from 'filigran-ui/clients';
import { Input } from 'filigran-ui/servers';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { zodResolver } from '@hookform/resolvers/zod';
import {
  FormControl,
  FormField,
  FormItem,
  FormMessage,
} from 'filigran-ui/clients';
import * as React from 'react';
import { Button } from 'filigran-ui/servers';
import { graphql, useMutation } from 'react-relay';

const malwareAnalysis = graphql`
  mutation malwareAnalysisFormMutation($string: String!) {
    malwareAnalysis(string: $string) {
      id
      connectors
    }
  }
`;

const formSchema = z
  .object({
    string: z.string(),
    file: z.custom<FileList>(),
  })
  .partial()
  .superRefine((data, ctx) => {
    if (!(data.string || (data.file && data.file.length > 0))) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: '',
        path: ['string'],
      });
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: 'At least one of the field must be provided.',
        path: ['file'],
      });
    } else if (data.string && data.file && data.file.length > 0) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: '',
        path: ['string'],
      });
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: "You can't submit file and string at the same time",
        path: ['file'],
      });
    }
  });
export const MalwareAnalysisForm = () => {
  const [malwareAnalysisMutation] = useMutation(malwareAnalysis);
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      string: undefined,
      file: undefined,
    },
  });
  const fileRef = form.register('file');
  const onSubmit = (variables: z.infer<typeof formSchema>) => {
    malwareAnalysisMutation({
      variables,
    });
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)}>
        <FormField
          control={form.control}
          name="string"
          render={({ field }) => (
            <FormItem>
              <FormLabel>String</FormLabel>
              <FormControl>
                <Input
                  placeholder="String"
                  {...field}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="file"
          render={() => {
            return (
              <FormItem>
                <FormLabel>File</FormLabel>
                <FormControl>
                  <Input
                    type="file"
                    placeholder="file"
                    {...fileRef}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            );
          }}
        />
        <div className="pt-s">
          <Button type="submit">Validate</Button>
        </div>
      </form>
    </Form>
  );
};
