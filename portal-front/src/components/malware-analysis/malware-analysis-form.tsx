'use client';
import {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  useToast,
  FormMessage,
} from 'filigran-ui/clients';
import { Button, Input } from 'filigran-ui/servers';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { zodResolver } from '@hookform/resolvers/zod';

import * as React from 'react';
import { useMutation } from 'react-relay';
import { UploadableMap } from 'relay-runtime';
import { PlusIcon } from 'lucide-react';
import { malwareAnalysis } from '@/components/malware-analysis/malware-analysis.graphql';
import { useCallback } from 'react';


const formSchema = z
  .object({
    string: z.string(),
    file: z.custom<FileList>(),
  })
  .partial()
  .superRefine((data, ctx) => {
    if (!(data.string || (data.file && data.file.length > 0))) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: '',
        path: ['string'],
      });
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: 'At least one of the field must be provided.',
        path: ['file'],
      });
    } else if (data.string && data.file && data.file.length > 0) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: '',
        path: ['string'],
      });
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: "You can't submit file and string at the same time",
        path: ['file'],
      });
    }
  });
export const MalwareAnalysisForm = () => {
  const [open, setOpen] = React.useState(false);
  const { toast } = useToast();
  const [malwareAnalysisMutation] = useMutation(malwareAnalysis);
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      string: '',
      file: undefined,
    },
  });
  const fileRef = form.register('file');

  const onSubmit = (variables: z.infer<typeof formSchema>) => {
    malwareAnalysisMutation({
      variables,
      uploadables: variables.file as unknown as UploadableMap,
      onCompleted: () => {
        setOpen(false);
        toast({
          title: 'Success',
          description: 'The analysis has been submitted successfully.',
        });
      },
      onError: (error) => {
        toast({
          variant: 'destructive',
          title: 'Error',
          description: <>{error.message}</>,
        });
      },
    });
  };

  const onOpenChange = useCallback((open: boolean) => {
    form.reset();
    setOpen(open);
  }, []);

  return (
    <Dialog
      open={open}
      onOpenChange={onOpenChange}>
      <DialogTrigger asChild>
        <Button>
          <PlusIcon className="mr-2 h-4 w-4" /> New analysis
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>New analysis</DialogTitle>
          <DialogDescription>
            Submit an URL, URL file, IPV4, IPV6 or upload a file
          </DialogDescription>
        </DialogHeader>
        <Form {...form}>
          <form
            onSubmit={form.handleSubmit(onSubmit)}
            className={'space-y-s'}>
            <FormField
              control={form.control}
              name="string"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Write an URL,URL file, IPV4, IPV6...</FormLabel>
                  <FormControl>
                    <Input
                      placeholder="value..."
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="file"
              render={() => {
                return (
                  <FormItem>
                    <FormLabel>File</FormLabel>
                    <FormControl>
                      <Input
                        type="file"
                        placeholder="file"
                        {...fileRef}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                );
              }}
            />
            <DialogFooter>
              <Button
                className="mt-s"
                type="submit">
                Validate
              </Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
};
