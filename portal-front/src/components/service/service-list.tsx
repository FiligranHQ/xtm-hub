'use client';

import {
  pageLoaderServiceQuery,
  pageLoaderServiceQuery$variables,
} from '../../../__generated__/pageLoaderServiceQuery.graphql';
import * as React from 'react';
import { useMemo, useState } from 'react';
import {
  PreloadedQuery,
  usePreloadedQuery,
  useRefetchableFragment,
  useSubscription,
} from 'react-relay';
import { serviceList_services$key } from '../../../__generated__/serviceList_services.graphql';
import { serviceList_fragment$data } from '../../../__generated__/serviceList_fragment.graphql';
import {
  servicesListFragment,
  subscription,
} from '@/components/service/service.graphql';
import { Button } from 'filigran-ui/servers';
import { ServiceListQuery } from '../../../app/(application)/(user)/service/page-loader';
import Loader from '@/components/loader';
import { DataTable } from 'filigran-ui/clients';
import {
  ColumnDef,
  PaginationState,
  SortingState,
} from '@tanstack/react-table';
import Link from 'next/link';
import { transformSortingValueToParams } from '@/components/ui/handle-sorting.utils';

interface ServiceProps {
  queryRef: PreloadedQuery<pageLoaderServiceQuery>;
}

const columns: ColumnDef<serviceList_fragment$data>[] = [
  {
    accessorKey: 'name',
    id: 'name',
    header: 'Name',
  },
  {
    id: 'actions',
    size: 100,
    enableHiding: false,
    enableSorting: false,
    enableResizing: false,
    cell: ({ row }) => {
      return (
        <Button asChild>
          <Link href={`#${row.original.name}`}>View more</Link>
        </Button>
      );
    },
  },
];
const ServiceList: React.FunctionComponent<ServiceProps> = ({ queryRef }) => {
  const DEFAULT_ITEM_BY_PAGE = 10;
  const [pagination, setPagination] = useState<PaginationState>({
    pageIndex: 0,
    pageSize: DEFAULT_ITEM_BY_PAGE,
  });
  const queryData = usePreloadedQuery<pageLoaderServiceQuery>(
    ServiceListQuery,
    queryRef
  );
  const [data, refetch] = useRefetchableFragment<
    pageLoaderServiceQuery,
    serviceList_services$key
  >(servicesListFragment, queryData);

  // @ts-ignore __id is automatically generated by relay
  const connectionID = data?.services?.__id;
  const config = useMemo(
    () => ({
      variables: { connections: [connectionID] },
      subscription,
    }),
    [connectionID]
  );

  useSubscription(config);
  const servicesData = data.services.edges.map(
    ({ node }) => node
  ) as serviceList_fragment$data[];

  const handleRefetchData = (
    args?: Partial<pageLoaderServiceQuery$variables>
  ) => {
    refetch({
      count: pagination.pageSize,
      cursor: btoa(String(pagination.pageSize * pagination.pageIndex)),
      orderBy: 'name',
      orderMode: 'asc',
      ...transformSortingValueToParams(sorting),
      ...args,
    });
  };

  const totalPages = Math.ceil(data.services.totalCount / DEFAULT_ITEM_BY_PAGE);
  const [sorting, setSorting] = useState<SortingState>([]);

  // https://tanstack.com/table/latest/docs/framework/react/guide/table-state#2-updaters-can-either-be-raw-values-or-callback-functions
  const onSortingChange = (updater: unknown) => {
    const newSortingValue =
      updater instanceof Function ? updater(sorting) : updater;
    handleRefetchData(transformSortingValueToParams(newSortingValue));
    setSorting(updater as SortingState);
  };

  const onPaginationChange = (updater: unknown) => {
    const newPaginationValue: PaginationState =
      updater instanceof Function ? updater(pagination) : updater;
    handleRefetchData({
      count: newPaginationValue.pageSize,
      cursor: btoa(
        String(newPaginationValue.pageSize * newPaginationValue.pageIndex)
      ),
    });
    setPagination(newPaginationValue);
  };

  return (
    <>
      <React.Suspense fallback={<Loader />}>
        <DataTable
          data={servicesData}
          columns={columns}
          tableOptions={{
            onSortingChange: onSortingChange,
            onPaginationChange: onPaginationChange,
            manualPagination: true,
            rowCount: data.services.totalCount,
            manualSorting: true,
          }}
          tableState={{ sorting, pagination }}
        />
      </React.Suspense>
    </>
  );
};
// endregion

export default ServiceList;
